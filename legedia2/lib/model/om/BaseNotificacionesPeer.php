<?php

/**
 * Base static class for performing query and update operations on the 'notificaciones' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Oct 27 21:17:36 2010
 *
 * @package    lib.model.om
 */
abstract class BaseNotificacionesPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'legedia';

	/** the table name for this class */
	const TABLE_NAME = 'notificaciones';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Notificaciones';

	/** The total number of columns. */
	const NUM_COLUMNS = 115;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the NOTID field */
	const NOTID = 'notificaciones.NOTID';

	/** the column name for the SOPORTE field */
	const SOPORTE = 'notificaciones.SOPORTE';

	/** the column name for the TIPO field */
	const TIPO = 'notificaciones.TIPO';

	/** the column name for the TIPO_NOTI field */
	const TIPO_NOTI = 'notificaciones.TIPO_NOTI';

	/** the column name for the ID_FICHERO field */
	const ID_FICHERO = 'notificaciones.ID_FICHERO';

	/** the column name for the FECHA field */
	const FECHA = 'notificaciones.FECHA';

	/** the column name for the HORA_PROCESO field */
	const HORA_PROCESO = 'notificaciones.HORA_PROCESO';

	/** the column name for the PROCESADO field */
	const PROCESADO = 'notificaciones.PROCESADO';

	/** the column name for the HAY_QUE_PARAR field */
	const HAY_QUE_PARAR = 'notificaciones.HAY_QUE_PARAR';

	/** the column name for the MODELO field */
	const MODELO = 'notificaciones.MODELO';

	/** the column name for the TITULARIDAD field */
	const TITULARIDAD = 'notificaciones.TITULARIDAD';

	/** the column name for the PRESENTACION field */
	const PRESENTACION = 'notificaciones.PRESENTACION';

	/** the column name for the FORMA field */
	const FORMA = 'notificaciones.FORMA';

	/** the column name for the ID_UPLOAD field */
	const ID_UPLOAD = 'notificaciones.ID_UPLOAD';

	/** the column name for the PF_RAZON_S field */
	const PF_RAZON_S = 'notificaciones.PF_RAZON_S';

	/** the column name for the PF_CIF_NIF field */
	const PF_CIF_NIF = 'notificaciones.PF_CIF_NIF';

	/** the column name for the PF_NOMBRE field */
	const PF_NOMBRE = 'notificaciones.PF_NOMBRE';

	/** the column name for the PF_APELLIDO1 field */
	const PF_APELLIDO1 = 'notificaciones.PF_APELLIDO1';

	/** the column name for the PF_APELLIDO2 field */
	const PF_APELLIDO2 = 'notificaciones.PF_APELLIDO2';

	/** the column name for the PF_NIF field */
	const PF_NIF = 'notificaciones.PF_NIF';

	/** the column name for the PF_CARGO field */
	const PF_CARGO = 'notificaciones.PF_CARGO';

	/** the column name for the DEC_RAZON_S field */
	const DEC_RAZON_S = 'notificaciones.DEC_RAZON_S';

	/** the column name for the DEC_DIRECCION field */
	const DEC_DIRECCION = 'notificaciones.DEC_DIRECCION';

	/** the column name for the DEC_LOCALIDAD field */
	const DEC_LOCALIDAD = 'notificaciones.DEC_LOCALIDAD';

	/** the column name for the DEC_CP field */
	const DEC_CP = 'notificaciones.DEC_CP';

	/** the column name for the DEC_PROVINCIA field */
	const DEC_PROVINCIA = 'notificaciones.DEC_PROVINCIA';

	/** the column name for the DEC_PAIS field */
	const DEC_PAIS = 'notificaciones.DEC_PAIS';

	/** the column name for the DEC_TEL field */
	const DEC_TEL = 'notificaciones.DEC_TEL';

	/** the column name for the DEC_FAX field */
	const DEC_FAX = 'notificaciones.DEC_FAX';

	/** the column name for the DEC_MAIL field */
	const DEC_MAIL = 'notificaciones.DEC_MAIL';

	/** the column name for the DEC_FORMA field */
	const DEC_FORMA = 'notificaciones.DEC_FORMA';

	/** the column name for the RF_NOMBRE field */
	const RF_NOMBRE = 'notificaciones.RF_NOMBRE';

	/** the column name for the RF_ACTIVIDAD field */
	const RF_ACTIVIDAD = 'notificaciones.RF_ACTIVIDAD';

	/** the column name for the RF_CIF field */
	const RF_CIF = 'notificaciones.RF_CIF';

	/** the column name for the RF_DOMICILIO field */
	const RF_DOMICILIO = 'notificaciones.RF_DOMICILIO';

	/** the column name for the RF_LOCALIDAD field */
	const RF_LOCALIDAD = 'notificaciones.RF_LOCALIDAD';

	/** the column name for the RF_CP field */
	const RF_CP = 'notificaciones.RF_CP';

	/** the column name for the RF_PROVINCIA field */
	const RF_PROVINCIA = 'notificaciones.RF_PROVINCIA';

	/** the column name for the RF_PAIS field */
	const RF_PAIS = 'notificaciones.RF_PAIS';

	/** the column name for the RF_TEL field */
	const RF_TEL = 'notificaciones.RF_TEL';

	/** the column name for the RF_FAX field */
	const RF_FAX = 'notificaciones.RF_FAX';

	/** the column name for the RF_MAIL field */
	const RF_MAIL = 'notificaciones.RF_MAIL';

	/** the column name for the DR_NOMBREOF field */
	const DR_NOMBREOF = 'notificaciones.DR_NOMBREOF';

	/** the column name for the DR_CIF field */
	const DR_CIF = 'notificaciones.DR_CIF';

	/** the column name for the DR_DIRPOSTAL field */
	const DR_DIRPOSTAL = 'notificaciones.DR_DIRPOSTAL';

	/** the column name for the DR_LOCALIDAD field */
	const DR_LOCALIDAD = 'notificaciones.DR_LOCALIDAD';

	/** the column name for the DR_CP field */
	const DR_CP = 'notificaciones.DR_CP';

	/** the column name for the DR_PROVINCIA field */
	const DR_PROVINCIA = 'notificaciones.DR_PROVINCIA';

	/** the column name for the DR_PAIS field */
	const DR_PAIS = 'notificaciones.DR_PAIS';

	/** the column name for the DR_TEL field */
	const DR_TEL = 'notificaciones.DR_TEL';

	/** the column name for the DR_FAX field */
	const DR_FAX = 'notificaciones.DR_FAX';

	/** the column name for the DR_MAIL field */
	const DR_MAIL = 'notificaciones.DR_MAIL';

	/** the column name for the TIPO_SOLICITUD field */
	const TIPO_SOLICITUD = 'notificaciones.TIPO_SOLICITUD';

	/** the column name for the AC_MOD_RESPONSABLE field */
	const AC_MOD_RESPONSABLE = 'notificaciones.AC_MOD_RESPONSABLE';

	/** the column name for the AC_MOD_CIF_NIF_ANT field */
	const AC_MOD_CIF_NIF_ANT = 'notificaciones.AC_MOD_CIF_NIF_ANT';

	/** the column name for the AC_MOD_SERVICIO_UNIDAD field */
	const AC_MOD_SERVICIO_UNIDAD = 'notificaciones.AC_MOD_SERVICIO_UNIDAD';

	/** the column name for the AC_MOD_DISPOSICION field */
	const AC_MOD_DISPOSICION = 'notificaciones.AC_MOD_DISPOSICION';

	/** the column name for the AC_MOD_IDEN_FINALID field */
	const AC_MOD_IDEN_FINALID = 'notificaciones.AC_MOD_IDEN_FINALID';

	/** the column name for the AC_MOD_ENCARGADO field */
	const AC_MOD_ENCARGADO = 'notificaciones.AC_MOD_ENCARGADO';

	/** the column name for the AC_MOD_ESTRUCT_SISTEMA field */
	const AC_MOD_ESTRUCT_SISTEMA = 'notificaciones.AC_MOD_ESTRUCT_SISTEMA';

	/** the column name for the AC_MOD_MEDIDAS_SEG field */
	const AC_MOD_MEDIDAS_SEG = 'notificaciones.AC_MOD_MEDIDAS_SEG';

	/** the column name for the AC_MOD_ORIGEN field */
	const AC_MOD_ORIGEN = 'notificaciones.AC_MOD_ORIGEN';

	/** the column name for the AC_MOD_TRANS_INTER field */
	const AC_MOD_TRANS_INTER = 'notificaciones.AC_MOD_TRANS_INTER';

	/** the column name for the AC_MOD_COMUNIC_CES field */
	const AC_MOD_COMUNIC_CES = 'notificaciones.AC_MOD_COMUNIC_CES';

	/** the column name for the AC_SUPR_MOTIVOS field */
	const AC_SUPR_MOTIVOS = 'notificaciones.AC_SUPR_MOTIVOS';

	/** the column name for the AC_SUPR_DESTINO_PREVISIONES field */
	const AC_SUPR_DESTINO_PREVISIONES = 'notificaciones.AC_SUPR_DESTINO_PREVISIONES';

	/** the column name for the AC_SUPR_CIFNIF field */
	const AC_SUPR_CIFNIF = 'notificaciones.AC_SUPR_CIFNIF';

	/** the column name for the ET_NOMBRE field */
	const ET_NOMBRE = 'notificaciones.ET_NOMBRE';

	/** the column name for the ET_CIF field */
	const ET_CIF = 'notificaciones.ET_CIF';

	/** the column name for the ET_DIRPOSTAL field */
	const ET_DIRPOSTAL = 'notificaciones.ET_DIRPOSTAL';

	/** the column name for the ET_LOCALIDAD field */
	const ET_LOCALIDAD = 'notificaciones.ET_LOCALIDAD';

	/** the column name for the ET_CP field */
	const ET_CP = 'notificaciones.ET_CP';

	/** the column name for the ET_PROVINCIA field */
	const ET_PROVINCIA = 'notificaciones.ET_PROVINCIA';

	/** the column name for the ET_PAIS field */
	const ET_PAIS = 'notificaciones.ET_PAIS';

	/** the column name for the ET_TEL field */
	const ET_TEL = 'notificaciones.ET_TEL';

	/** the column name for the ET_FAX field */
	const ET_FAX = 'notificaciones.ET_FAX';

	/** the column name for the ET_MAIL field */
	const ET_MAIL = 'notificaciones.ET_MAIL';

	/** the column name for the IDN_NOMBRE field */
	const IDN_NOMBRE = 'notificaciones.IDN_NOMBRE';

	/** the column name for the IDN_DESCRIPCION field */
	const IDN_DESCRIPCION = 'notificaciones.IDN_DESCRIPCION';

	/** the column name for the IDN_FINALIDADES field */
	const IDN_FINALIDADES = 'notificaciones.IDN_FINALIDADES';

	/** the column name for the INDICA_INTE field */
	const INDICA_INTE = 'notificaciones.INDICA_INTE';

	/** the column name for the INDICA_OTRAS field */
	const INDICA_OTRAS = 'notificaciones.INDICA_OTRAS';

	/** the column name for the INDIC_FAP field */
	const INDIC_FAP = 'notificaciones.INDIC_FAP';

	/** the column name for the INDIC_RP field */
	const INDIC_RP = 'notificaciones.INDIC_RP';

	/** the column name for the INDIC_EP field */
	const INDIC_EP = 'notificaciones.INDIC_EP';

	/** the column name for the INDIC_AP field */
	const INDIC_AP = 'notificaciones.INDIC_AP';

	/** the column name for the OP_COLECTIVOS field */
	const OP_COLECTIVOS = 'notificaciones.OP_COLECTIVOS';

	/** the column name for the OP_OTROSCOL field */
	const OP_OTROSCOL = 'notificaciones.OP_OTROSCOL';

	/** the column name for the IND_IDE field */
	const IND_IDE = 'notificaciones.IND_IDE';

	/** the column name for the IND_AS field */
	const IND_AS = 'notificaciones.IND_AS';

	/** the column name for the IND_R field */
	const IND_R = 'notificaciones.IND_R';

	/** the column name for the IND_C field */
	const IND_C = 'notificaciones.IND_C';

	/** the column name for the IND_RE field */
	const IND_RE = 'notificaciones.IND_RE';

	/** the column name for the IND_SAL field */
	const IND_SAL = 'notificaciones.IND_SAL';

	/** the column name for the IND_SEXO field */
	const IND_SEXO = 'notificaciones.IND_SEXO';

	/** the column name for the IND_NIF field */
	const IND_NIF = 'notificaciones.IND_NIF';

	/** the column name for the IND_SS field */
	const IND_SS = 'notificaciones.IND_SS';

	/** the column name for the IND_N_A field */
	const IND_N_A = 'notificaciones.IND_N_A';

	/** the column name for the IND_TS field */
	const IND_TS = 'notificaciones.IND_TS';

	/** the column name for the IND_DIR field */
	const IND_DIR = 'notificaciones.IND_DIR';

	/** the column name for the IND_TEL field */
	const IND_TEL = 'notificaciones.IND_TEL';

	/** the column name for the IND_HUELLA field */
	const IND_HUELLA = 'notificaciones.IND_HUELLA';

	/** the column name for the IND_IMG field */
	const IND_IMG = 'notificaciones.IND_IMG';

	/** the column name for the IND_MARCAS field */
	const IND_MARCAS = 'notificaciones.IND_MARCAS';

	/** the column name for the IND_FIRMA field */
	const IND_FIRMA = 'notificaciones.IND_FIRMA';

	/** the column name for the TD_OTROSPROTEGIDOS field */
	const TD_OTROSPROTEGIDOS = 'notificaciones.TD_OTROSPROTEGIDOS';

	/** the column name for the TD_OTROSTIPIFICADOS field */
	const TD_OTROSTIPIFICADOS = 'notificaciones.TD_OTROSTIPIFICADOS';

	/** the column name for the TD_OTROSTIPOSDATOS field */
	const TD_OTROSTIPOSDATOS = 'notificaciones.TD_OTROSTIPOSDATOS';

	/** the column name for the TD_TRATAMIENTO field */
	const TD_TRATAMIENTO = 'notificaciones.TD_TRATAMIENTO';

	/** the column name for the SEGURIDAD field */
	const SEGURIDAD = 'notificaciones.SEGURIDAD';

	/** the column name for the CD_DESTINATARIOS field */
	const CD_DESTINATARIOS = 'notificaciones.CD_DESTINATARIOS';

	/** the column name for the CD_OTROSDESTINATARIOS field */
	const CD_OTROSDESTINATARIOS = 'notificaciones.CD_OTROSDESTINATARIOS';

	/** the column name for the PAISES_DESTINA field */
	const PAISES_DESTINA = 'notificaciones.PAISES_DESTINA';

	/** the column name for the CAT_DESTINA field */
	const CAT_DESTINA = 'notificaciones.CAT_DESTINA';

	/** the column name for the OTRO_PAIS_DESTINA field */
	const OTRO_PAIS_DESTINA = 'notificaciones.OTRO_PAIS_DESTINA';

	/**
	 * An identiy map to hold any loaded instances of Notificaciones objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Notificaciones[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Notid', 'Soporte', 'Tipo', 'TipoNoti', 'IdFichero', 'Fecha', 'HoraProceso', 'Procesado', 'HayQueParar', 'Modelo', 'Titularidad', 'Presentacion', 'Forma', 'IdUpload', 'PfRazonS', 'PfCifNif', 'PfNombre', 'PfApellido1', 'PfApellido2', 'PfNif', 'PfCargo', 'DecRazonS', 'DecDireccion', 'DecLocalidad', 'DecCp', 'DecProvincia', 'DecPais', 'DecTel', 'DecFax', 'DecMail', 'DecForma', 'RfNombre', 'RfActividad', 'RfCif', 'RfDomicilio', 'RfLocalidad', 'RfCp', 'RfProvincia', 'RfPais', 'RfTel', 'RfFax', 'RfMail', 'DrNombreof', 'DrCif', 'DrDirpostal', 'DrLocalidad', 'DrCp', 'DrProvincia', 'DrPais', 'DrTel', 'DrFax', 'DrMail', 'TipoSolicitud', 'AcModResponsable', 'AcModCifNifAnt', 'AcModServicioUnidad', 'AcModDisposicion', 'AcModIdenFinalid', 'AcModEncargado', 'AcModEstructSistema', 'AcModMedidasSeg', 'AcModOrigen', 'AcModTransInter', 'AcModComunicCes', 'AcSuprMotivos', 'AcSuprDestinoPrevisiones', 'AcSuprCifnif', 'EtNombre', 'EtCif', 'EtDirpostal', 'EtLocalidad', 'EtCp', 'EtProvincia', 'EtPais', 'EtTel', 'EtFax', 'EtMail', 'IdnNombre', 'IdnDescripcion', 'IdnFinalidades', 'IndicaInte', 'IndicaOtras', 'IndicFap', 'IndicRp', 'IndicEp', 'IndicAp', 'OpColectivos', 'OpOtroscol', 'IndIde', 'IndAs', 'IndR', 'IndC', 'IndRe', 'IndSal', 'IndSexo', 'IndNif', 'IndSs', 'IndNA', 'IndTs', 'IndDir', 'IndTel', 'IndHuella', 'IndImg', 'IndMarcas', 'IndFirma', 'TdOtrosprotegidos', 'TdOtrostipificados', 'TdOtrostiposdatos', 'TdTratamiento', 'Seguridad', 'CdDestinatarios', 'CdOtrosdestinatarios', 'PaisesDestina', 'CatDestina', 'OtroPaisDestina', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('notid', 'soporte', 'tipo', 'tipoNoti', 'idFichero', 'fecha', 'horaProceso', 'procesado', 'hayQueParar', 'modelo', 'titularidad', 'presentacion', 'forma', 'idUpload', 'pfRazonS', 'pfCifNif', 'pfNombre', 'pfApellido1', 'pfApellido2', 'pfNif', 'pfCargo', 'decRazonS', 'decDireccion', 'decLocalidad', 'decCp', 'decProvincia', 'decPais', 'decTel', 'decFax', 'decMail', 'decForma', 'rfNombre', 'rfActividad', 'rfCif', 'rfDomicilio', 'rfLocalidad', 'rfCp', 'rfProvincia', 'rfPais', 'rfTel', 'rfFax', 'rfMail', 'drNombreof', 'drCif', 'drDirpostal', 'drLocalidad', 'drCp', 'drProvincia', 'drPais', 'drTel', 'drFax', 'drMail', 'tipoSolicitud', 'acModResponsable', 'acModCifNifAnt', 'acModServicioUnidad', 'acModDisposicion', 'acModIdenFinalid', 'acModEncargado', 'acModEstructSistema', 'acModMedidasSeg', 'acModOrigen', 'acModTransInter', 'acModComunicCes', 'acSuprMotivos', 'acSuprDestinoPrevisiones', 'acSuprCifnif', 'etNombre', 'etCif', 'etDirpostal', 'etLocalidad', 'etCp', 'etProvincia', 'etPais', 'etTel', 'etFax', 'etMail', 'idnNombre', 'idnDescripcion', 'idnFinalidades', 'indicaInte', 'indicaOtras', 'indicFap', 'indicRp', 'indicEp', 'indicAp', 'opColectivos', 'opOtroscol', 'indIde', 'indAs', 'indR', 'indC', 'indRe', 'indSal', 'indSexo', 'indNif', 'indSs', 'indNA', 'indTs', 'indDir', 'indTel', 'indHuella', 'indImg', 'indMarcas', 'indFirma', 'tdOtrosprotegidos', 'tdOtrostipificados', 'tdOtrostiposdatos', 'tdTratamiento', 'seguridad', 'cdDestinatarios', 'cdOtrosdestinatarios', 'paisesDestina', 'catDestina', 'otroPaisDestina', ),
		BasePeer::TYPE_COLNAME => array (self::NOTID, self::SOPORTE, self::TIPO, self::TIPO_NOTI, self::ID_FICHERO, self::FECHA, self::HORA_PROCESO, self::PROCESADO, self::HAY_QUE_PARAR, self::MODELO, self::TITULARIDAD, self::PRESENTACION, self::FORMA, self::ID_UPLOAD, self::PF_RAZON_S, self::PF_CIF_NIF, self::PF_NOMBRE, self::PF_APELLIDO1, self::PF_APELLIDO2, self::PF_NIF, self::PF_CARGO, self::DEC_RAZON_S, self::DEC_DIRECCION, self::DEC_LOCALIDAD, self::DEC_CP, self::DEC_PROVINCIA, self::DEC_PAIS, self::DEC_TEL, self::DEC_FAX, self::DEC_MAIL, self::DEC_FORMA, self::RF_NOMBRE, self::RF_ACTIVIDAD, self::RF_CIF, self::RF_DOMICILIO, self::RF_LOCALIDAD, self::RF_CP, self::RF_PROVINCIA, self::RF_PAIS, self::RF_TEL, self::RF_FAX, self::RF_MAIL, self::DR_NOMBREOF, self::DR_CIF, self::DR_DIRPOSTAL, self::DR_LOCALIDAD, self::DR_CP, self::DR_PROVINCIA, self::DR_PAIS, self::DR_TEL, self::DR_FAX, self::DR_MAIL, self::TIPO_SOLICITUD, self::AC_MOD_RESPONSABLE, self::AC_MOD_CIF_NIF_ANT, self::AC_MOD_SERVICIO_UNIDAD, self::AC_MOD_DISPOSICION, self::AC_MOD_IDEN_FINALID, self::AC_MOD_ENCARGADO, self::AC_MOD_ESTRUCT_SISTEMA, self::AC_MOD_MEDIDAS_SEG, self::AC_MOD_ORIGEN, self::AC_MOD_TRANS_INTER, self::AC_MOD_COMUNIC_CES, self::AC_SUPR_MOTIVOS, self::AC_SUPR_DESTINO_PREVISIONES, self::AC_SUPR_CIFNIF, self::ET_NOMBRE, self::ET_CIF, self::ET_DIRPOSTAL, self::ET_LOCALIDAD, self::ET_CP, self::ET_PROVINCIA, self::ET_PAIS, self::ET_TEL, self::ET_FAX, self::ET_MAIL, self::IDN_NOMBRE, self::IDN_DESCRIPCION, self::IDN_FINALIDADES, self::INDICA_INTE, self::INDICA_OTRAS, self::INDIC_FAP, self::INDIC_RP, self::INDIC_EP, self::INDIC_AP, self::OP_COLECTIVOS, self::OP_OTROSCOL, self::IND_IDE, self::IND_AS, self::IND_R, self::IND_C, self::IND_RE, self::IND_SAL, self::IND_SEXO, self::IND_NIF, self::IND_SS, self::IND_N_A, self::IND_TS, self::IND_DIR, self::IND_TEL, self::IND_HUELLA, self::IND_IMG, self::IND_MARCAS, self::IND_FIRMA, self::TD_OTROSPROTEGIDOS, self::TD_OTROSTIPIFICADOS, self::TD_OTROSTIPOSDATOS, self::TD_TRATAMIENTO, self::SEGURIDAD, self::CD_DESTINATARIOS, self::CD_OTROSDESTINATARIOS, self::PAISES_DESTINA, self::CAT_DESTINA, self::OTRO_PAIS_DESTINA, ),
		BasePeer::TYPE_FIELDNAME => array ('notid', 'soporte', 'tipo', 'tipo_noti', 'id_fichero', 'fecha', 'hora_proceso', 'procesado', 'hay_que_parar', 'modelo', 'titularidad', 'presentacion', 'forma', 'id_upload', 'pf_razon_s', 'pf_cif_nif', 'pf_nombre', 'pf_apellido1', 'pf_apellido2', 'pf_nif', 'pf_cargo', 'dec_razon_s', 'dec_direccion', 'dec_localidad', 'dec_cp', 'dec_provincia', 'dec_pais', 'dec_tel', 'dec_fax', 'dec_mail', 'dec_forma', 'rf_nombre', 'rf_actividad', 'rf_cif', 'rf_domicilio', 'rf_localidad', 'rf_cp', 'rf_provincia', 'rf_pais', 'rf_tel', 'rf_fax', 'rf_mail', 'dr_nombreof', 'dr_cif', 'dr_dirpostal', 'dr_localidad', 'dr_cp', 'dr_provincia', 'dr_pais', 'dr_tel', 'dr_fax', 'dr_mail', 'tipo_solicitud', 'ac_mod_responsable', 'ac_mod_cif_nif_ant', 'ac_mod_servicio_unidad', 'ac_mod_disposicion', 'ac_mod_iden_finalid', 'ac_mod_encargado', 'ac_mod_estruct_sistema', 'ac_mod_medidas_seg', 'ac_mod_origen', 'ac_mod_trans_inter', 'ac_mod_comunic_ces', 'ac_supr_motivos', 'ac_supr_destino_previsiones', 'ac_supr_cifnif', 'et_nombre', 'et_cif', 'et_dirpostal', 'et_localidad', 'et_cp', 'et_provincia', 'et_pais', 'et_tel', 'et_fax', 'et_mail', 'idn_nombre', 'idn_descripcion', 'idn_finalidades', 'indica_inte', 'indica_otras', 'indic_fap', 'indic_rp', 'indic_ep', 'indic_ap', 'op_colectivos', 'op_otroscol', 'ind_ide', 'ind_as', 'ind_r', 'ind_c', 'ind_re', 'ind_sal', 'ind_sexo', 'ind_nif', 'ind_ss', 'ind_n_a', 'ind_ts', 'ind_dir', 'ind_tel', 'ind_huella', 'ind_img', 'ind_marcas', 'ind_firma', 'td_otrosprotegidos', 'td_otrostipificados', 'td_otrostiposdatos', 'td_tratamiento', 'seguridad', 'cd_destinatarios', 'cd_otrosdestinatarios', 'paises_destina', 'cat_destina', 'otro_pais_destina', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Notid' => 0, 'Soporte' => 1, 'Tipo' => 2, 'TipoNoti' => 3, 'IdFichero' => 4, 'Fecha' => 5, 'HoraProceso' => 6, 'Procesado' => 7, 'HayQueParar' => 8, 'Modelo' => 9, 'Titularidad' => 10, 'Presentacion' => 11, 'Forma' => 12, 'IdUpload' => 13, 'PfRazonS' => 14, 'PfCifNif' => 15, 'PfNombre' => 16, 'PfApellido1' => 17, 'PfApellido2' => 18, 'PfNif' => 19, 'PfCargo' => 20, 'DecRazonS' => 21, 'DecDireccion' => 22, 'DecLocalidad' => 23, 'DecCp' => 24, 'DecProvincia' => 25, 'DecPais' => 26, 'DecTel' => 27, 'DecFax' => 28, 'DecMail' => 29, 'DecForma' => 30, 'RfNombre' => 31, 'RfActividad' => 32, 'RfCif' => 33, 'RfDomicilio' => 34, 'RfLocalidad' => 35, 'RfCp' => 36, 'RfProvincia' => 37, 'RfPais' => 38, 'RfTel' => 39, 'RfFax' => 40, 'RfMail' => 41, 'DrNombreof' => 42, 'DrCif' => 43, 'DrDirpostal' => 44, 'DrLocalidad' => 45, 'DrCp' => 46, 'DrProvincia' => 47, 'DrPais' => 48, 'DrTel' => 49, 'DrFax' => 50, 'DrMail' => 51, 'TipoSolicitud' => 52, 'AcModResponsable' => 53, 'AcModCifNifAnt' => 54, 'AcModServicioUnidad' => 55, 'AcModDisposicion' => 56, 'AcModIdenFinalid' => 57, 'AcModEncargado' => 58, 'AcModEstructSistema' => 59, 'AcModMedidasSeg' => 60, 'AcModOrigen' => 61, 'AcModTransInter' => 62, 'AcModComunicCes' => 63, 'AcSuprMotivos' => 64, 'AcSuprDestinoPrevisiones' => 65, 'AcSuprCifnif' => 66, 'EtNombre' => 67, 'EtCif' => 68, 'EtDirpostal' => 69, 'EtLocalidad' => 70, 'EtCp' => 71, 'EtProvincia' => 72, 'EtPais' => 73, 'EtTel' => 74, 'EtFax' => 75, 'EtMail' => 76, 'IdnNombre' => 77, 'IdnDescripcion' => 78, 'IdnFinalidades' => 79, 'IndicaInte' => 80, 'IndicaOtras' => 81, 'IndicFap' => 82, 'IndicRp' => 83, 'IndicEp' => 84, 'IndicAp' => 85, 'OpColectivos' => 86, 'OpOtroscol' => 87, 'IndIde' => 88, 'IndAs' => 89, 'IndR' => 90, 'IndC' => 91, 'IndRe' => 92, 'IndSal' => 93, 'IndSexo' => 94, 'IndNif' => 95, 'IndSs' => 96, 'IndNA' => 97, 'IndTs' => 98, 'IndDir' => 99, 'IndTel' => 100, 'IndHuella' => 101, 'IndImg' => 102, 'IndMarcas' => 103, 'IndFirma' => 104, 'TdOtrosprotegidos' => 105, 'TdOtrostipificados' => 106, 'TdOtrostiposdatos' => 107, 'TdTratamiento' => 108, 'Seguridad' => 109, 'CdDestinatarios' => 110, 'CdOtrosdestinatarios' => 111, 'PaisesDestina' => 112, 'CatDestina' => 113, 'OtroPaisDestina' => 114, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('notid' => 0, 'soporte' => 1, 'tipo' => 2, 'tipoNoti' => 3, 'idFichero' => 4, 'fecha' => 5, 'horaProceso' => 6, 'procesado' => 7, 'hayQueParar' => 8, 'modelo' => 9, 'titularidad' => 10, 'presentacion' => 11, 'forma' => 12, 'idUpload' => 13, 'pfRazonS' => 14, 'pfCifNif' => 15, 'pfNombre' => 16, 'pfApellido1' => 17, 'pfApellido2' => 18, 'pfNif' => 19, 'pfCargo' => 20, 'decRazonS' => 21, 'decDireccion' => 22, 'decLocalidad' => 23, 'decCp' => 24, 'decProvincia' => 25, 'decPais' => 26, 'decTel' => 27, 'decFax' => 28, 'decMail' => 29, 'decForma' => 30, 'rfNombre' => 31, 'rfActividad' => 32, 'rfCif' => 33, 'rfDomicilio' => 34, 'rfLocalidad' => 35, 'rfCp' => 36, 'rfProvincia' => 37, 'rfPais' => 38, 'rfTel' => 39, 'rfFax' => 40, 'rfMail' => 41, 'drNombreof' => 42, 'drCif' => 43, 'drDirpostal' => 44, 'drLocalidad' => 45, 'drCp' => 46, 'drProvincia' => 47, 'drPais' => 48, 'drTel' => 49, 'drFax' => 50, 'drMail' => 51, 'tipoSolicitud' => 52, 'acModResponsable' => 53, 'acModCifNifAnt' => 54, 'acModServicioUnidad' => 55, 'acModDisposicion' => 56, 'acModIdenFinalid' => 57, 'acModEncargado' => 58, 'acModEstructSistema' => 59, 'acModMedidasSeg' => 60, 'acModOrigen' => 61, 'acModTransInter' => 62, 'acModComunicCes' => 63, 'acSuprMotivos' => 64, 'acSuprDestinoPrevisiones' => 65, 'acSuprCifnif' => 66, 'etNombre' => 67, 'etCif' => 68, 'etDirpostal' => 69, 'etLocalidad' => 70, 'etCp' => 71, 'etProvincia' => 72, 'etPais' => 73, 'etTel' => 74, 'etFax' => 75, 'etMail' => 76, 'idnNombre' => 77, 'idnDescripcion' => 78, 'idnFinalidades' => 79, 'indicaInte' => 80, 'indicaOtras' => 81, 'indicFap' => 82, 'indicRp' => 83, 'indicEp' => 84, 'indicAp' => 85, 'opColectivos' => 86, 'opOtroscol' => 87, 'indIde' => 88, 'indAs' => 89, 'indR' => 90, 'indC' => 91, 'indRe' => 92, 'indSal' => 93, 'indSexo' => 94, 'indNif' => 95, 'indSs' => 96, 'indNA' => 97, 'indTs' => 98, 'indDir' => 99, 'indTel' => 100, 'indHuella' => 101, 'indImg' => 102, 'indMarcas' => 103, 'indFirma' => 104, 'tdOtrosprotegidos' => 105, 'tdOtrostipificados' => 106, 'tdOtrostiposdatos' => 107, 'tdTratamiento' => 108, 'seguridad' => 109, 'cdDestinatarios' => 110, 'cdOtrosdestinatarios' => 111, 'paisesDestina' => 112, 'catDestina' => 113, 'otroPaisDestina' => 114, ),
		BasePeer::TYPE_COLNAME => array (self::NOTID => 0, self::SOPORTE => 1, self::TIPO => 2, self::TIPO_NOTI => 3, self::ID_FICHERO => 4, self::FECHA => 5, self::HORA_PROCESO => 6, self::PROCESADO => 7, self::HAY_QUE_PARAR => 8, self::MODELO => 9, self::TITULARIDAD => 10, self::PRESENTACION => 11, self::FORMA => 12, self::ID_UPLOAD => 13, self::PF_RAZON_S => 14, self::PF_CIF_NIF => 15, self::PF_NOMBRE => 16, self::PF_APELLIDO1 => 17, self::PF_APELLIDO2 => 18, self::PF_NIF => 19, self::PF_CARGO => 20, self::DEC_RAZON_S => 21, self::DEC_DIRECCION => 22, self::DEC_LOCALIDAD => 23, self::DEC_CP => 24, self::DEC_PROVINCIA => 25, self::DEC_PAIS => 26, self::DEC_TEL => 27, self::DEC_FAX => 28, self::DEC_MAIL => 29, self::DEC_FORMA => 30, self::RF_NOMBRE => 31, self::RF_ACTIVIDAD => 32, self::RF_CIF => 33, self::RF_DOMICILIO => 34, self::RF_LOCALIDAD => 35, self::RF_CP => 36, self::RF_PROVINCIA => 37, self::RF_PAIS => 38, self::RF_TEL => 39, self::RF_FAX => 40, self::RF_MAIL => 41, self::DR_NOMBREOF => 42, self::DR_CIF => 43, self::DR_DIRPOSTAL => 44, self::DR_LOCALIDAD => 45, self::DR_CP => 46, self::DR_PROVINCIA => 47, self::DR_PAIS => 48, self::DR_TEL => 49, self::DR_FAX => 50, self::DR_MAIL => 51, self::TIPO_SOLICITUD => 52, self::AC_MOD_RESPONSABLE => 53, self::AC_MOD_CIF_NIF_ANT => 54, self::AC_MOD_SERVICIO_UNIDAD => 55, self::AC_MOD_DISPOSICION => 56, self::AC_MOD_IDEN_FINALID => 57, self::AC_MOD_ENCARGADO => 58, self::AC_MOD_ESTRUCT_SISTEMA => 59, self::AC_MOD_MEDIDAS_SEG => 60, self::AC_MOD_ORIGEN => 61, self::AC_MOD_TRANS_INTER => 62, self::AC_MOD_COMUNIC_CES => 63, self::AC_SUPR_MOTIVOS => 64, self::AC_SUPR_DESTINO_PREVISIONES => 65, self::AC_SUPR_CIFNIF => 66, self::ET_NOMBRE => 67, self::ET_CIF => 68, self::ET_DIRPOSTAL => 69, self::ET_LOCALIDAD => 70, self::ET_CP => 71, self::ET_PROVINCIA => 72, self::ET_PAIS => 73, self::ET_TEL => 74, self::ET_FAX => 75, self::ET_MAIL => 76, self::IDN_NOMBRE => 77, self::IDN_DESCRIPCION => 78, self::IDN_FINALIDADES => 79, self::INDICA_INTE => 80, self::INDICA_OTRAS => 81, self::INDIC_FAP => 82, self::INDIC_RP => 83, self::INDIC_EP => 84, self::INDIC_AP => 85, self::OP_COLECTIVOS => 86, self::OP_OTROSCOL => 87, self::IND_IDE => 88, self::IND_AS => 89, self::IND_R => 90, self::IND_C => 91, self::IND_RE => 92, self::IND_SAL => 93, self::IND_SEXO => 94, self::IND_NIF => 95, self::IND_SS => 96, self::IND_N_A => 97, self::IND_TS => 98, self::IND_DIR => 99, self::IND_TEL => 100, self::IND_HUELLA => 101, self::IND_IMG => 102, self::IND_MARCAS => 103, self::IND_FIRMA => 104, self::TD_OTROSPROTEGIDOS => 105, self::TD_OTROSTIPIFICADOS => 106, self::TD_OTROSTIPOSDATOS => 107, self::TD_TRATAMIENTO => 108, self::SEGURIDAD => 109, self::CD_DESTINATARIOS => 110, self::CD_OTROSDESTINATARIOS => 111, self::PAISES_DESTINA => 112, self::CAT_DESTINA => 113, self::OTRO_PAIS_DESTINA => 114, ),
		BasePeer::TYPE_FIELDNAME => array ('notid' => 0, 'soporte' => 1, 'tipo' => 2, 'tipo_noti' => 3, 'id_fichero' => 4, 'fecha' => 5, 'hora_proceso' => 6, 'procesado' => 7, 'hay_que_parar' => 8, 'modelo' => 9, 'titularidad' => 10, 'presentacion' => 11, 'forma' => 12, 'id_upload' => 13, 'pf_razon_s' => 14, 'pf_cif_nif' => 15, 'pf_nombre' => 16, 'pf_apellido1' => 17, 'pf_apellido2' => 18, 'pf_nif' => 19, 'pf_cargo' => 20, 'dec_razon_s' => 21, 'dec_direccion' => 22, 'dec_localidad' => 23, 'dec_cp' => 24, 'dec_provincia' => 25, 'dec_pais' => 26, 'dec_tel' => 27, 'dec_fax' => 28, 'dec_mail' => 29, 'dec_forma' => 30, 'rf_nombre' => 31, 'rf_actividad' => 32, 'rf_cif' => 33, 'rf_domicilio' => 34, 'rf_localidad' => 35, 'rf_cp' => 36, 'rf_provincia' => 37, 'rf_pais' => 38, 'rf_tel' => 39, 'rf_fax' => 40, 'rf_mail' => 41, 'dr_nombreof' => 42, 'dr_cif' => 43, 'dr_dirpostal' => 44, 'dr_localidad' => 45, 'dr_cp' => 46, 'dr_provincia' => 47, 'dr_pais' => 48, 'dr_tel' => 49, 'dr_fax' => 50, 'dr_mail' => 51, 'tipo_solicitud' => 52, 'ac_mod_responsable' => 53, 'ac_mod_cif_nif_ant' => 54, 'ac_mod_servicio_unidad' => 55, 'ac_mod_disposicion' => 56, 'ac_mod_iden_finalid' => 57, 'ac_mod_encargado' => 58, 'ac_mod_estruct_sistema' => 59, 'ac_mod_medidas_seg' => 60, 'ac_mod_origen' => 61, 'ac_mod_trans_inter' => 62, 'ac_mod_comunic_ces' => 63, 'ac_supr_motivos' => 64, 'ac_supr_destino_previsiones' => 65, 'ac_supr_cifnif' => 66, 'et_nombre' => 67, 'et_cif' => 68, 'et_dirpostal' => 69, 'et_localidad' => 70, 'et_cp' => 71, 'et_provincia' => 72, 'et_pais' => 73, 'et_tel' => 74, 'et_fax' => 75, 'et_mail' => 76, 'idn_nombre' => 77, 'idn_descripcion' => 78, 'idn_finalidades' => 79, 'indica_inte' => 80, 'indica_otras' => 81, 'indic_fap' => 82, 'indic_rp' => 83, 'indic_ep' => 84, 'indic_ap' => 85, 'op_colectivos' => 86, 'op_otroscol' => 87, 'ind_ide' => 88, 'ind_as' => 89, 'ind_r' => 90, 'ind_c' => 91, 'ind_re' => 92, 'ind_sal' => 93, 'ind_sexo' => 94, 'ind_nif' => 95, 'ind_ss' => 96, 'ind_n_a' => 97, 'ind_ts' => 98, 'ind_dir' => 99, 'ind_tel' => 100, 'ind_huella' => 101, 'ind_img' => 102, 'ind_marcas' => 103, 'ind_firma' => 104, 'td_otrosprotegidos' => 105, 'td_otrostipificados' => 106, 'td_otrostiposdatos' => 107, 'td_tratamiento' => 108, 'seguridad' => 109, 'cd_destinatarios' => 110, 'cd_otrosdestinatarios' => 111, 'paises_destina' => 112, 'cat_destina' => 113, 'otro_pais_destina' => 114, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new NotificacionesMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. NotificacionesPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(NotificacionesPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(NotificacionesPeer::NOTID);

		$criteria->addSelectColumn(NotificacionesPeer::SOPORTE);

		$criteria->addSelectColumn(NotificacionesPeer::TIPO);

		$criteria->addSelectColumn(NotificacionesPeer::TIPO_NOTI);

		$criteria->addSelectColumn(NotificacionesPeer::ID_FICHERO);

		$criteria->addSelectColumn(NotificacionesPeer::FECHA);

		$criteria->addSelectColumn(NotificacionesPeer::HORA_PROCESO);

		$criteria->addSelectColumn(NotificacionesPeer::PROCESADO);

		$criteria->addSelectColumn(NotificacionesPeer::HAY_QUE_PARAR);

		$criteria->addSelectColumn(NotificacionesPeer::MODELO);

		$criteria->addSelectColumn(NotificacionesPeer::TITULARIDAD);

		$criteria->addSelectColumn(NotificacionesPeer::PRESENTACION);

		$criteria->addSelectColumn(NotificacionesPeer::FORMA);

		$criteria->addSelectColumn(NotificacionesPeer::ID_UPLOAD);

		$criteria->addSelectColumn(NotificacionesPeer::PF_RAZON_S);

		$criteria->addSelectColumn(NotificacionesPeer::PF_CIF_NIF);

		$criteria->addSelectColumn(NotificacionesPeer::PF_NOMBRE);

		$criteria->addSelectColumn(NotificacionesPeer::PF_APELLIDO1);

		$criteria->addSelectColumn(NotificacionesPeer::PF_APELLIDO2);

		$criteria->addSelectColumn(NotificacionesPeer::PF_NIF);

		$criteria->addSelectColumn(NotificacionesPeer::PF_CARGO);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_RAZON_S);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_DIRECCION);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_LOCALIDAD);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_CP);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_PROVINCIA);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_PAIS);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_TEL);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_FAX);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_MAIL);

		$criteria->addSelectColumn(NotificacionesPeer::DEC_FORMA);

		$criteria->addSelectColumn(NotificacionesPeer::RF_NOMBRE);

		$criteria->addSelectColumn(NotificacionesPeer::RF_ACTIVIDAD);

		$criteria->addSelectColumn(NotificacionesPeer::RF_CIF);

		$criteria->addSelectColumn(NotificacionesPeer::RF_DOMICILIO);

		$criteria->addSelectColumn(NotificacionesPeer::RF_LOCALIDAD);

		$criteria->addSelectColumn(NotificacionesPeer::RF_CP);

		$criteria->addSelectColumn(NotificacionesPeer::RF_PROVINCIA);

		$criteria->addSelectColumn(NotificacionesPeer::RF_PAIS);

		$criteria->addSelectColumn(NotificacionesPeer::RF_TEL);

		$criteria->addSelectColumn(NotificacionesPeer::RF_FAX);

		$criteria->addSelectColumn(NotificacionesPeer::RF_MAIL);

		$criteria->addSelectColumn(NotificacionesPeer::DR_NOMBREOF);

		$criteria->addSelectColumn(NotificacionesPeer::DR_CIF);

		$criteria->addSelectColumn(NotificacionesPeer::DR_DIRPOSTAL);

		$criteria->addSelectColumn(NotificacionesPeer::DR_LOCALIDAD);

		$criteria->addSelectColumn(NotificacionesPeer::DR_CP);

		$criteria->addSelectColumn(NotificacionesPeer::DR_PROVINCIA);

		$criteria->addSelectColumn(NotificacionesPeer::DR_PAIS);

		$criteria->addSelectColumn(NotificacionesPeer::DR_TEL);

		$criteria->addSelectColumn(NotificacionesPeer::DR_FAX);

		$criteria->addSelectColumn(NotificacionesPeer::DR_MAIL);

		$criteria->addSelectColumn(NotificacionesPeer::TIPO_SOLICITUD);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_RESPONSABLE);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_CIF_NIF_ANT);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_SERVICIO_UNIDAD);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_DISPOSICION);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_IDEN_FINALID);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_ENCARGADO);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_ESTRUCT_SISTEMA);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_MEDIDAS_SEG);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_ORIGEN);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_TRANS_INTER);

		$criteria->addSelectColumn(NotificacionesPeer::AC_MOD_COMUNIC_CES);

		$criteria->addSelectColumn(NotificacionesPeer::AC_SUPR_MOTIVOS);

		$criteria->addSelectColumn(NotificacionesPeer::AC_SUPR_DESTINO_PREVISIONES);

		$criteria->addSelectColumn(NotificacionesPeer::AC_SUPR_CIFNIF);

		$criteria->addSelectColumn(NotificacionesPeer::ET_NOMBRE);

		$criteria->addSelectColumn(NotificacionesPeer::ET_CIF);

		$criteria->addSelectColumn(NotificacionesPeer::ET_DIRPOSTAL);

		$criteria->addSelectColumn(NotificacionesPeer::ET_LOCALIDAD);

		$criteria->addSelectColumn(NotificacionesPeer::ET_CP);

		$criteria->addSelectColumn(NotificacionesPeer::ET_PROVINCIA);

		$criteria->addSelectColumn(NotificacionesPeer::ET_PAIS);

		$criteria->addSelectColumn(NotificacionesPeer::ET_TEL);

		$criteria->addSelectColumn(NotificacionesPeer::ET_FAX);

		$criteria->addSelectColumn(NotificacionesPeer::ET_MAIL);

		$criteria->addSelectColumn(NotificacionesPeer::IDN_NOMBRE);

		$criteria->addSelectColumn(NotificacionesPeer::IDN_DESCRIPCION);

		$criteria->addSelectColumn(NotificacionesPeer::IDN_FINALIDADES);

		$criteria->addSelectColumn(NotificacionesPeer::INDICA_INTE);

		$criteria->addSelectColumn(NotificacionesPeer::INDICA_OTRAS);

		$criteria->addSelectColumn(NotificacionesPeer::INDIC_FAP);

		$criteria->addSelectColumn(NotificacionesPeer::INDIC_RP);

		$criteria->addSelectColumn(NotificacionesPeer::INDIC_EP);

		$criteria->addSelectColumn(NotificacionesPeer::INDIC_AP);

		$criteria->addSelectColumn(NotificacionesPeer::OP_COLECTIVOS);

		$criteria->addSelectColumn(NotificacionesPeer::OP_OTROSCOL);

		$criteria->addSelectColumn(NotificacionesPeer::IND_IDE);

		$criteria->addSelectColumn(NotificacionesPeer::IND_AS);

		$criteria->addSelectColumn(NotificacionesPeer::IND_R);

		$criteria->addSelectColumn(NotificacionesPeer::IND_C);

		$criteria->addSelectColumn(NotificacionesPeer::IND_RE);

		$criteria->addSelectColumn(NotificacionesPeer::IND_SAL);

		$criteria->addSelectColumn(NotificacionesPeer::IND_SEXO);

		$criteria->addSelectColumn(NotificacionesPeer::IND_NIF);

		$criteria->addSelectColumn(NotificacionesPeer::IND_SS);

		$criteria->addSelectColumn(NotificacionesPeer::IND_N_A);

		$criteria->addSelectColumn(NotificacionesPeer::IND_TS);

		$criteria->addSelectColumn(NotificacionesPeer::IND_DIR);

		$criteria->addSelectColumn(NotificacionesPeer::IND_TEL);

		$criteria->addSelectColumn(NotificacionesPeer::IND_HUELLA);

		$criteria->addSelectColumn(NotificacionesPeer::IND_IMG);

		$criteria->addSelectColumn(NotificacionesPeer::IND_MARCAS);

		$criteria->addSelectColumn(NotificacionesPeer::IND_FIRMA);

		$criteria->addSelectColumn(NotificacionesPeer::TD_OTROSPROTEGIDOS);

		$criteria->addSelectColumn(NotificacionesPeer::TD_OTROSTIPIFICADOS);

		$criteria->addSelectColumn(NotificacionesPeer::TD_OTROSTIPOSDATOS);

		$criteria->addSelectColumn(NotificacionesPeer::TD_TRATAMIENTO);

		$criteria->addSelectColumn(NotificacionesPeer::SEGURIDAD);

		$criteria->addSelectColumn(NotificacionesPeer::CD_DESTINATARIOS);

		$criteria->addSelectColumn(NotificacionesPeer::CD_OTROSDESTINATARIOS);

		$criteria->addSelectColumn(NotificacionesPeer::PAISES_DESTINA);

		$criteria->addSelectColumn(NotificacionesPeer::CAT_DESTINA);

		$criteria->addSelectColumn(NotificacionesPeer::OTRO_PAIS_DESTINA);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotificacionesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotificacionesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseNotificacionesPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Notificaciones
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = NotificacionesPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return NotificacionesPeer::populateObjects(NotificacionesPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseNotificacionesPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			NotificacionesPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Notificaciones $value A Notificaciones object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Notificaciones $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getNotid();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Notificaciones object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Notificaciones) {
				$key = (string) $value->getNotid();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Notificaciones object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Notificaciones Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = NotificacionesPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = NotificacionesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = NotificacionesPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				NotificacionesPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Formulario table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinFormulario(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotificacionesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotificacionesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(NotificacionesPeer::ID_FICHERO,), array(FormularioPeer::ID_FORMULARIO,), $join_behavior);


    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseNotificacionesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Notificaciones objects pre-filled with their Formulario objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Notificaciones objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinFormulario(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseNotificacionesPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		NotificacionesPeer::addSelectColumns($c);
		$startcol = (NotificacionesPeer::NUM_COLUMNS - NotificacionesPeer::NUM_LAZY_LOAD_COLUMNS);
		FormularioPeer::addSelectColumns($c);

		$c->addJoin(array(NotificacionesPeer::ID_FICHERO,), array(FormularioPeer::ID_FORMULARIO,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = NotificacionesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = NotificacionesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = NotificacionesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				NotificacionesPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = FormularioPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = FormularioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = FormularioPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					FormularioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Notificaciones) to $obj2 (Formulario)
				$obj2->addNotificaciones($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(NotificacionesPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			NotificacionesPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(NotificacionesPeer::ID_FICHERO,), array(FormularioPeer::ID_FORMULARIO,), $join_behavior);

    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseNotificacionesPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Notificaciones objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Notificaciones objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseNotificacionesPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		NotificacionesPeer::addSelectColumns($c);
		$startcol2 = (NotificacionesPeer::NUM_COLUMNS - NotificacionesPeer::NUM_LAZY_LOAD_COLUMNS);

		FormularioPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (FormularioPeer::NUM_COLUMNS - FormularioPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(NotificacionesPeer::ID_FICHERO,), array(FormularioPeer::ID_FORMULARIO,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = NotificacionesPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = NotificacionesPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = NotificacionesPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				NotificacionesPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Formulario rows

			$key2 = FormularioPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = FormularioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = FormularioPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					FormularioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Notificaciones) to the collection in $obj2 (Formulario)
				$obj2->addNotificaciones($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return NotificacionesPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a Notificaciones or Criteria object.
	 *
	 * @param      mixed $values Criteria or Notificaciones object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseNotificacionesPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Notificaciones object
		}

		if ($criteria->containsKey(NotificacionesPeer::NOTID) && $criteria->keyContainsValue(NotificacionesPeer::NOTID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.NotificacionesPeer::NOTID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseNotificacionesPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Notificaciones or Criteria object.
	 *
	 * @param      mixed $values Criteria or Notificaciones object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseNotificacionesPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(NotificacionesPeer::NOTID);
			$selectCriteria->add(NotificacionesPeer::NOTID, $criteria->remove(NotificacionesPeer::NOTID), $comparison);

		} else { // $values is Notificaciones object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseNotificacionesPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseNotificacionesPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the notificaciones table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(NotificacionesPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Notificaciones or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Notificaciones object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			NotificacionesPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Notificaciones) {
			// invalidate the cache for this single object
			NotificacionesPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(NotificacionesPeer::NOTID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				NotificacionesPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Notificaciones object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Notificaciones $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Notificaciones $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(NotificacionesPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(NotificacionesPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(NotificacionesPeer::DATABASE_NAME, NotificacionesPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = NotificacionesPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Notificaciones
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = NotificacionesPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(NotificacionesPeer::DATABASE_NAME);
		$criteria->add(NotificacionesPeer::NOTID, $pk);

		$v = NotificacionesPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(NotificacionesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(NotificacionesPeer::DATABASE_NAME);
			$criteria->add(NotificacionesPeer::NOTID, $pks, Criteria::IN);
			$objs = NotificacionesPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseNotificacionesPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the NotificacionesPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the NotificacionesPeer class:
//
// Propel::getDatabaseMap(NotificacionesPeer::DATABASE_NAME)->addTableBuilder(NotificacionesPeer::TABLE_NAME, NotificacionesPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseNotificacionesPeer::DATABASE_NAME)->addTableBuilder(BaseNotificacionesPeer::TABLE_NAME, BaseNotificacionesPeer::getMapBuilder());

