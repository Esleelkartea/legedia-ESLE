<?php

/**
 * Base class that represents a row from the 'parametro' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Oct 27 21:17:36 2010
 *
 * @package    lib.model.om
 */
abstract class BaseParametro extends BaseObject  implements Persistent {


  const PEER = 'ParametroPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ParametroPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_parametro field.
	 * @var        int
	 */
	protected $id_parametro;

	/**
	 * The value for the tipoparametro field.
	 * @var        string
	 */
	protected $tipoparametro;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the orden field.
	 * @var        int
	 */
	protected $orden;

	/**
	 * The value for the numero field.
	 * @var        double
	 */
	protected $numero;

	/**
	 * The value for the numero2 field.
	 * @var        double
	 */
	protected $numero2;

	/**
	 * The value for the cadena field.
	 * @var        string
	 */
	protected $cadena;

	/**
	 * The value for the cadena1 field.
	 * @var        string
	 */
	protected $cadena1;

	/**
	 * The value for the otroobjeto field.
	 * @var        int
	 */
	protected $otroobjeto;

	/**
	 * The value for the si_no field.
	 * @var        boolean
	 */
	protected $si_no;

	/**
	 * The value for the fecha field.
	 * @var        string
	 */
	protected $fecha;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the fechaborrado field.
	 * @var        string
	 */
	protected $fechaborrado;

	/**
	 * The value for the nombrefichero field.
	 * @var        string
	 */
	protected $nombrefichero;

	/**
	 * The value for the tipo field.
	 * @var        string
	 */
	protected $tipo;

	/**
	 * The value for the fichero field.
	 * @var        string
	 */
	protected $fichero;

	/**
	 * The value for the tamano field.
	 * @var        int
	 */
	protected $tamano;

	/**
	 * @var        ParametroDef
	 */
	protected $aParametroDef;

	/**
	 * @var        array Tabla[] Collection to store aggregation of Tabla objects.
	 */
	protected $collTablas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTablas.
	 */
	private $lastTablaCriteria = null;

	/**
	 * @var        array Tarea[] Collection to store aggregation of Tarea objects.
	 */
	protected $collTareas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTareas.
	 */
	private $lastTareaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseParametro object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id_parametro] column value.
	 * 
	 * @return     int
	 */
	public function getIdParametro()
	{
		return $this->id_parametro;
	}

	/**
	 * Get the [tipoparametro] column value.
	 * 
	 * @return     string
	 */
	public function getTipoparametro()
	{
		return $this->tipoparametro;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [orden] column value.
	 * 
	 * @return     int
	 */
	public function getOrden()
	{
		return $this->orden;
	}

	/**
	 * Get the [numero] column value.
	 * 
	 * @return     double
	 */
	public function getNumero()
	{
		return $this->numero;
	}

	/**
	 * Get the [numero2] column value.
	 * 
	 * @return     double
	 */
	public function getNumero2()
	{
		return $this->numero2;
	}

	/**
	 * Get the [cadena] column value.
	 * 
	 * @return     string
	 */
	public function getCadena()
	{
		return $this->cadena;
	}

	/**
	 * Get the [cadena1] column value.
	 * 
	 * @return     string
	 */
	public function getCadena1()
	{
		return $this->cadena1;
	}

	/**
	 * Get the [otroobjeto] column value.
	 * 
	 * @return     int
	 */
	public function getOtroobjeto()
	{
		return $this->otroobjeto;
	}

	/**
	 * Get the [si_no] column value.
	 * 
	 * @return     boolean
	 */
	public function getSiNo()
	{
		return $this->si_no;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFecha($format = 'Y-m-d H:i:s')
	{
		if ($this->fecha === null) {
			return null;
		}


		if ($this->fecha === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fecha);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fechaborrado] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaborrado($format = 'Y-m-d H:i:s')
	{
		if ($this->fechaborrado === null) {
			return null;
		}


		if ($this->fechaborrado === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fechaborrado);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fechaborrado, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [nombrefichero] column value.
	 * 
	 * @return     string
	 */
	public function getNombrefichero()
	{
		return $this->nombrefichero;
	}

	/**
	 * Get the [tipo] column value.
	 * 
	 * @return     string
	 */
	public function getTipo()
	{
		return $this->tipo;
	}

	/**
	 * Get the [fichero] column value.
	 * 
	 * @return     string
	 */
	public function getFichero()
	{
		return $this->fichero;
	}

	/**
	 * Get the [tamano] column value.
	 * 
	 * @return     int
	 */
	public function getTamano()
	{
		return $this->tamano;
	}

	/**
	 * Set the value of [id_parametro] column.
	 * 
	 * @param      int $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setIdParametro($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_parametro !== $v) {
			$this->id_parametro = $v;
			$this->modifiedColumns[] = ParametroPeer::ID_PARAMETRO;
		}

		return $this;
	} // setIdParametro()

	/**
	 * Set the value of [tipoparametro] column.
	 * 
	 * @param      string $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setTipoparametro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipoparametro !== $v) {
			$this->tipoparametro = $v;
			$this->modifiedColumns[] = ParametroPeer::TIPOPARAMETRO;
		}

		if ($this->aParametroDef !== null && $this->aParametroDef->getTipoparametro() !== $v) {
			$this->aParametroDef = null;
		}

		return $this;
	} // setTipoparametro()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = ParametroPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [orden] column.
	 * 
	 * @param      int $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setOrden($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->orden !== $v) {
			$this->orden = $v;
			$this->modifiedColumns[] = ParametroPeer::ORDEN;
		}

		return $this;
	} // setOrden()

	/**
	 * Set the value of [numero] column.
	 * 
	 * @param      double $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setNumero($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->numero !== $v) {
			$this->numero = $v;
			$this->modifiedColumns[] = ParametroPeer::NUMERO;
		}

		return $this;
	} // setNumero()

	/**
	 * Set the value of [numero2] column.
	 * 
	 * @param      double $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setNumero2($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->numero2 !== $v) {
			$this->numero2 = $v;
			$this->modifiedColumns[] = ParametroPeer::NUMERO2;
		}

		return $this;
	} // setNumero2()

	/**
	 * Set the value of [cadena] column.
	 * 
	 * @param      string $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setCadena($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cadena !== $v) {
			$this->cadena = $v;
			$this->modifiedColumns[] = ParametroPeer::CADENA;
		}

		return $this;
	} // setCadena()

	/**
	 * Set the value of [cadena1] column.
	 * 
	 * @param      string $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setCadena1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cadena1 !== $v) {
			$this->cadena1 = $v;
			$this->modifiedColumns[] = ParametroPeer::CADENA1;
		}

		return $this;
	} // setCadena1()

	/**
	 * Set the value of [otroobjeto] column.
	 * 
	 * @param      int $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setOtroobjeto($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->otroobjeto !== $v) {
			$this->otroobjeto = $v;
			$this->modifiedColumns[] = ParametroPeer::OTROOBJETO;
		}

		return $this;
	} // setOtroobjeto()

	/**
	 * Set the value of [si_no] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setSiNo($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->si_no !== $v) {
			$this->si_no = $v;
			$this->modifiedColumns[] = ParametroPeer::SI_NO;
		}

		return $this;
	} // setSiNo()

	/**
	 * Sets the value of [fecha] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setFecha($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha !== null && $tmpDt = new DateTime($this->fecha)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ParametroPeer::FECHA;
			}
		} // if either are not null

		return $this;
	} // setFecha()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ParametroPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ParametroPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Sets the value of [fechaborrado] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setFechaborrado($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fechaborrado !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fechaborrado !== null && $tmpDt = new DateTime($this->fechaborrado)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fechaborrado = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ParametroPeer::FECHABORRADO;
			}
		} // if either are not null

		return $this;
	} // setFechaborrado()

	/**
	 * Set the value of [nombrefichero] column.
	 * 
	 * @param      string $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setNombrefichero($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombrefichero !== $v) {
			$this->nombrefichero = $v;
			$this->modifiedColumns[] = ParametroPeer::NOMBREFICHERO;
		}

		return $this;
	} // setNombrefichero()

	/**
	 * Set the value of [tipo] column.
	 * 
	 * @param      string $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setTipo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo !== $v) {
			$this->tipo = $v;
			$this->modifiedColumns[] = ParametroPeer::TIPO;
		}

		return $this;
	} // setTipo()

	/**
	 * Set the value of [fichero] column.
	 * 
	 * @param      string $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setFichero($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fichero !== $v) {
			$this->fichero = $v;
			$this->modifiedColumns[] = ParametroPeer::FICHERO;
		}

		return $this;
	} // setFichero()

	/**
	 * Set the value of [tamano] column.
	 * 
	 * @param      int $v new value
	 * @return     Parametro The current object (for fluent API support)
	 */
	public function setTamano($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tamano !== $v) {
			$this->tamano = $v;
			$this->modifiedColumns[] = ParametroPeer::TAMANO;
		}

		return $this;
	} // setTamano()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_parametro = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->tipoparametro = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->nombre = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->orden = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->numero = ($row[$startcol + 4] !== null) ? (double) $row[$startcol + 4] : null;
			$this->numero2 = ($row[$startcol + 5] !== null) ? (double) $row[$startcol + 5] : null;
			$this->cadena = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->cadena1 = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->otroobjeto = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->si_no = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->fecha = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->created_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->updated_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->fechaborrado = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->nombrefichero = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->tipo = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->fichero = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->tamano = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 18; // 18 = ParametroPeer::NUM_COLUMNS - ParametroPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Parametro object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aParametroDef !== null && $this->tipoparametro !== $this->aParametroDef->getTipoparametro()) {
			$this->aParametroDef = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ParametroPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ParametroPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aParametroDef = null;
			$this->collTablas = null;
			$this->lastTablaCriteria = null;

			$this->collTareas = null;
			$this->lastTareaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseParametro:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ParametroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ParametroPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseParametro:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseParametro:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(ParametroPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(ParametroPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ParametroPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseParametro:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ParametroPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aParametroDef !== null) {
				if ($this->aParametroDef->isModified() || $this->aParametroDef->isNew()) {
					$affectedRows += $this->aParametroDef->save($con);
				}
				$this->setParametroDef($this->aParametroDef);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ParametroPeer::ID_PARAMETRO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ParametroPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdParametro($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ParametroPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collTablas !== null) {
				foreach ($this->collTablas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTareas !== null) {
				foreach ($this->collTareas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aParametroDef !== null) {
				if (!$this->aParametroDef->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aParametroDef->getValidationFailures());
				}
			}


			if (($retval = ParametroPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTablas !== null) {
					foreach ($this->collTablas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTareas !== null) {
					foreach ($this->collTareas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ParametroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdParametro();
				break;
			case 1:
				return $this->getTipoparametro();
				break;
			case 2:
				return $this->getNombre();
				break;
			case 3:
				return $this->getOrden();
				break;
			case 4:
				return $this->getNumero();
				break;
			case 5:
				return $this->getNumero2();
				break;
			case 6:
				return $this->getCadena();
				break;
			case 7:
				return $this->getCadena1();
				break;
			case 8:
				return $this->getOtroobjeto();
				break;
			case 9:
				return $this->getSiNo();
				break;
			case 10:
				return $this->getFecha();
				break;
			case 11:
				return $this->getCreatedAt();
				break;
			case 12:
				return $this->getUpdatedAt();
				break;
			case 13:
				return $this->getFechaborrado();
				break;
			case 14:
				return $this->getNombrefichero();
				break;
			case 15:
				return $this->getTipo();
				break;
			case 16:
				return $this->getFichero();
				break;
			case 17:
				return $this->getTamano();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ParametroPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdParametro(),
			$keys[1] => $this->getTipoparametro(),
			$keys[2] => $this->getNombre(),
			$keys[3] => $this->getOrden(),
			$keys[4] => $this->getNumero(),
			$keys[5] => $this->getNumero2(),
			$keys[6] => $this->getCadena(),
			$keys[7] => $this->getCadena1(),
			$keys[8] => $this->getOtroobjeto(),
			$keys[9] => $this->getSiNo(),
			$keys[10] => $this->getFecha(),
			$keys[11] => $this->getCreatedAt(),
			$keys[12] => $this->getUpdatedAt(),
			$keys[13] => $this->getFechaborrado(),
			$keys[14] => $this->getNombrefichero(),
			$keys[15] => $this->getTipo(),
			$keys[16] => $this->getFichero(),
			$keys[17] => $this->getTamano(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ParametroPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdParametro($value);
				break;
			case 1:
				$this->setTipoparametro($value);
				break;
			case 2:
				$this->setNombre($value);
				break;
			case 3:
				$this->setOrden($value);
				break;
			case 4:
				$this->setNumero($value);
				break;
			case 5:
				$this->setNumero2($value);
				break;
			case 6:
				$this->setCadena($value);
				break;
			case 7:
				$this->setCadena1($value);
				break;
			case 8:
				$this->setOtroobjeto($value);
				break;
			case 9:
				$this->setSiNo($value);
				break;
			case 10:
				$this->setFecha($value);
				break;
			case 11:
				$this->setCreatedAt($value);
				break;
			case 12:
				$this->setUpdatedAt($value);
				break;
			case 13:
				$this->setFechaborrado($value);
				break;
			case 14:
				$this->setNombrefichero($value);
				break;
			case 15:
				$this->setTipo($value);
				break;
			case 16:
				$this->setFichero($value);
				break;
			case 17:
				$this->setTamano($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ParametroPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdParametro($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTipoparametro($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNombre($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setOrden($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNumero($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNumero2($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCadena($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCadena1($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setOtroobjeto($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setSiNo($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFecha($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCreatedAt($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUpdatedAt($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setFechaborrado($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setNombrefichero($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTipo($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFichero($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTamano($arr[$keys[17]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ParametroPeer::DATABASE_NAME);

		if ($this->isColumnModified(ParametroPeer::ID_PARAMETRO)) $criteria->add(ParametroPeer::ID_PARAMETRO, $this->id_parametro);
		if ($this->isColumnModified(ParametroPeer::TIPOPARAMETRO)) $criteria->add(ParametroPeer::TIPOPARAMETRO, $this->tipoparametro);
		if ($this->isColumnModified(ParametroPeer::NOMBRE)) $criteria->add(ParametroPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(ParametroPeer::ORDEN)) $criteria->add(ParametroPeer::ORDEN, $this->orden);
		if ($this->isColumnModified(ParametroPeer::NUMERO)) $criteria->add(ParametroPeer::NUMERO, $this->numero);
		if ($this->isColumnModified(ParametroPeer::NUMERO2)) $criteria->add(ParametroPeer::NUMERO2, $this->numero2);
		if ($this->isColumnModified(ParametroPeer::CADENA)) $criteria->add(ParametroPeer::CADENA, $this->cadena);
		if ($this->isColumnModified(ParametroPeer::CADENA1)) $criteria->add(ParametroPeer::CADENA1, $this->cadena1);
		if ($this->isColumnModified(ParametroPeer::OTROOBJETO)) $criteria->add(ParametroPeer::OTROOBJETO, $this->otroobjeto);
		if ($this->isColumnModified(ParametroPeer::SI_NO)) $criteria->add(ParametroPeer::SI_NO, $this->si_no);
		if ($this->isColumnModified(ParametroPeer::FECHA)) $criteria->add(ParametroPeer::FECHA, $this->fecha);
		if ($this->isColumnModified(ParametroPeer::CREATED_AT)) $criteria->add(ParametroPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(ParametroPeer::UPDATED_AT)) $criteria->add(ParametroPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(ParametroPeer::FECHABORRADO)) $criteria->add(ParametroPeer::FECHABORRADO, $this->fechaborrado);
		if ($this->isColumnModified(ParametroPeer::NOMBREFICHERO)) $criteria->add(ParametroPeer::NOMBREFICHERO, $this->nombrefichero);
		if ($this->isColumnModified(ParametroPeer::TIPO)) $criteria->add(ParametroPeer::TIPO, $this->tipo);
		if ($this->isColumnModified(ParametroPeer::FICHERO)) $criteria->add(ParametroPeer::FICHERO, $this->fichero);
		if ($this->isColumnModified(ParametroPeer::TAMANO)) $criteria->add(ParametroPeer::TAMANO, $this->tamano);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ParametroPeer::DATABASE_NAME);

		$criteria->add(ParametroPeer::ID_PARAMETRO, $this->id_parametro);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdParametro();
	}

	/**
	 * Generic method to set the primary key (id_parametro column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdParametro($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Parametro (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTipoparametro($this->tipoparametro);

		$copyObj->setNombre($this->nombre);

		$copyObj->setOrden($this->orden);

		$copyObj->setNumero($this->numero);

		$copyObj->setNumero2($this->numero2);

		$copyObj->setCadena($this->cadena);

		$copyObj->setCadena1($this->cadena1);

		$copyObj->setOtroobjeto($this->otroobjeto);

		$copyObj->setSiNo($this->si_no);

		$copyObj->setFecha($this->fecha);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setFechaborrado($this->fechaborrado);

		$copyObj->setNombrefichero($this->nombrefichero);

		$copyObj->setTipo($this->tipo);

		$copyObj->setFichero($this->fichero);

		$copyObj->setTamano($this->tamano);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getTablas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTabla($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTareas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTarea($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdParametro(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Parametro Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ParametroPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ParametroPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a ParametroDef object.
	 *
	 * @param      ParametroDef $v
	 * @return     Parametro The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setParametroDef(ParametroDef $v = null)
	{
		if ($v === null) {
			$this->setTipoparametro(NULL);
		} else {
			$this->setTipoparametro($v->getTipoparametro());
		}

		$this->aParametroDef = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ParametroDef object, it will not be re-added.
		if ($v !== null) {
			$v->addParametro($this);
		}

		return $this;
	}


	/**
	 * Get the associated ParametroDef object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ParametroDef The associated ParametroDef object.
	 * @throws     PropelException
	 */
	public function getParametroDef(PropelPDO $con = null)
	{
		if ($this->aParametroDef === null && (($this->tipoparametro !== "" && $this->tipoparametro !== null))) {
			$c = new Criteria(ParametroDefPeer::DATABASE_NAME);
			$c->add(ParametroDefPeer::TIPOPARAMETRO, $this->tipoparametro);
			$this->aParametroDef = ParametroDefPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aParametroDef->addParametros($this);
			 */
		}
		return $this->aParametroDef;
	}

	/**
	 * Clears out the collTablas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTablas()
	 */
	public function clearTablas()
	{
		$this->collTablas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTablas collection (array).
	 *
	 * By default this just sets the collTablas collection to an empty array (like clearcollTablas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTablas()
	{
		$this->collTablas = array();
	}

	/**
	 * Gets an array of Tabla objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Parametro has previously been saved, it will retrieve
	 * related Tablas from storage. If this Parametro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tabla[]
	 * @throws     PropelException
	 */
	public function getTablas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
			   $this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_CATEGORIA, $this->id_parametro);

				TablaPeer::addSelectColumns($criteria);
				$this->collTablas = TablaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TablaPeer::ID_CATEGORIA, $this->id_parametro);

				TablaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
					$this->collTablas = TablaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTablaCriteria = $criteria;
		return $this->collTablas;
	}

	/**
	 * Returns the number of related Tabla objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tabla objects.
	 * @throws     PropelException
	 */
	public function countTablas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TablaPeer::ID_CATEGORIA, $this->id_parametro);

				$count = TablaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TablaPeer::ID_CATEGORIA, $this->id_parametro);

				if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
					$count = TablaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTablas);
				}
			} else {
				$count = count($this->collTablas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tabla object to this object
	 * through the Tabla foreign key attribute.
	 *
	 * @param      Tabla $l Tabla
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTabla(Tabla $l)
	{
		if ($this->collTablas === null) {
			$this->initTablas();
		}
		if (!in_array($l, $this->collTablas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTablas, $l);
			$l->setParametro($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Parametro is new, it will return
	 * an empty collection; or if this Parametro has previously
	 * been saved, it will retrieve related Tablas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Parametro.
	 */
	public function getTablasJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_CATEGORIA, $this->id_parametro);

				$this->collTablas = TablaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TablaPeer::ID_CATEGORIA, $this->id_parametro);

			if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
				$this->collTablas = TablaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastTablaCriteria = $criteria;

		return $this->collTablas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Parametro is new, it will return
	 * an empty collection; or if this Parametro has previously
	 * been saved, it will retrieve related Tablas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Parametro.
	 */
	public function getTablasJoinUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_CATEGORIA, $this->id_parametro);

				$this->collTablas = TablaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TablaPeer::ID_CATEGORIA, $this->id_parametro);

			if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
				$this->collTablas = TablaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTablaCriteria = $criteria;

		return $this->collTablas;
	}

	/**
	 * Clears out the collTareas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTareas()
	 */
	public function clearTareas()
	{
		$this->collTareas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTareas collection (array).
	 *
	 * By default this just sets the collTareas collection to an empty array (like clearcollTareas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTareas()
	{
		$this->collTareas = array();
	}

	/**
	 * Gets an array of Tarea objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Parametro has previously been saved, it will retrieve
	 * related Tareas from storage. If this Parametro is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tarea[]
	 * @throws     PropelException
	 */
	public function getTareas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
			   $this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

				TareaPeer::addSelectColumns($criteria);
				$this->collTareas = TareaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

				TareaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
					$this->collTareas = TareaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTareaCriteria = $criteria;
		return $this->collTareas;
	}

	/**
	 * Returns the number of related Tarea objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tarea objects.
	 * @throws     PropelException
	 */
	public function countTareas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

				$count = TareaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

				if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
					$count = TareaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTareas);
				}
			} else {
				$count = count($this->collTareas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tarea object to this object
	 * through the Tarea foreign key attribute.
	 *
	 * @param      Tarea $l Tarea
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTarea(Tarea $l)
	{
		if ($this->collTareas === null) {
			$this->initTareas();
		}
		if (!in_array($l, $this->collTareas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTareas, $l);
			$l->setParametro($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Parametro is new, it will return
	 * an empty collection; or if this Parametro has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Parametro.
	 */
	public function getTareasJoinFormulario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

				$this->collTareas = TareaPeer::doSelectJoinFormulario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinFormulario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Parametro is new, it will return
	 * an empty collection; or if this Parametro has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Parametro.
	 */
	public function getTareasJoinCampo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

				$this->collTareas = TareaPeer::doSelectJoinCampo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinCampo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Parametro is new, it will return
	 * an empty collection; or if this Parametro has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Parametro.
	 */
	public function getTareasJoinUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

				$this->collTareas = TareaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Parametro is new, it will return
	 * an empty collection; or if this Parametro has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Parametro.
	 */
	public function getTareasJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ParametroPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

				$this->collTareas = TareaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_ESTADO_TAREA, $this->id_parametro);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTablas) {
				foreach ((array) $this->collTablas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTareas) {
				foreach ((array) $this->collTareas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collTablas = null;
		$this->collTareas = null;
			$this->aParametroDef = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseParametro:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseParametro::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseParametro
