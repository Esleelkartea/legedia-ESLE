<?php

/**
 * Base class that represents a row from the 'usuario' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Oct 27 21:17:36 2010
 *
 * @package    lib.model.om
 */
abstract class BaseUsuario extends BaseObject  implements Persistent {


  const PEER = 'UsuarioPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UsuarioPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_usuario field.
	 * @var        int
	 */
	protected $id_usuario;

	/**
	 * The value for the id_idioma field.
	 * @var        string
	 */
	protected $id_idioma;

	/**
	 * The value for the usuario field.
	 * @var        string
	 */
	protected $usuario;

	/**
	 * The value for the clave field.
	 * @var        string
	 */
	protected $clave;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the apellido1 field.
	 * @var        string
	 */
	protected $apellido1;

	/**
	 * The value for the apellido2 field.
	 * @var        string
	 */
	protected $apellido2;

	/**
	 * The value for the dni field.
	 * @var        string
	 */
	protected $dni;

	/**
	 * The value for the domicilio field.
	 * @var        string
	 */
	protected $domicilio;

	/**
	 * The value for the poblacion field.
	 * @var        string
	 */
	protected $poblacion;

	/**
	 * The value for the cp field.
	 * @var        int
	 */
	protected $cp;

	/**
	 * The value for the id_provincia field.
	 * @var        int
	 */
	protected $id_provincia;

	/**
	 * The value for the pais field.
	 * @var        string
	 */
	protected $pais;

	/**
	 * The value for the movil field.
	 * @var        string
	 */
	protected $movil;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the ultima_visita field.
	 * @var        string
	 */
	protected $ultima_visita;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the public_key field.
	 * @var        string
	 */
	protected $public_key;

	/**
	 * The value for the es_externo field.
	 * @var        boolean
	 */
	protected $es_externo;

	/**
	 * The value for the alerta_email field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $alerta_email;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the fecha_borrado field.
	 * @var        string
	 */
	protected $fecha_borrado;

	/**
	 * @var        Catalogue
	 */
	protected $aCatalogue;

	/**
	 * @var        Provincia
	 */
	protected $aProvincia;

	/**
	 * @var        array UsuarioGrupo[] Collection to store aggregation of UsuarioGrupo objects.
	 */
	protected $collUsuarioGrupos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsuarioGrupos.
	 */
	private $lastUsuarioGrupoCriteria = null;

	/**
	 * @var        array Alcance[] Collection to store aggregation of Alcance objects.
	 */
	protected $collAlcances;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlcances.
	 */
	private $lastAlcanceCriteria = null;

	/**
	 * @var        array Sesion[] Collection to store aggregation of Sesion objects.
	 */
	protected $collSesions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSesions.
	 */
	private $lastSesionCriteria = null;

	/**
	 * @var        array Mensaje[] Collection to store aggregation of Mensaje objects.
	 */
	protected $collMensajes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMensajes.
	 */
	private $lastMensajeCriteria = null;

	/**
	 * @var        array MensajeDestino[] Collection to store aggregation of MensajeDestino objects.
	 */
	protected $collMensajeDestinos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMensajeDestinos.
	 */
	private $lastMensajeDestinoCriteria = null;

	/**
	 * @var        array Empresa[] Collection to store aggregation of Empresa objects.
	 */
	protected $collEmpresas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmpresas.
	 */
	private $lastEmpresaCriteria = null;

	/**
	 * @var        array Tabla[] Collection to store aggregation of Tabla objects.
	 */
	protected $collTablas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTablas.
	 */
	private $lastTablaCriteria = null;

	/**
	 * @var        array Formulario[] Collection to store aggregation of Formulario objects.
	 */
	protected $collFormulariosRelatedByIdUsuario;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFormulariosRelatedByIdUsuario.
	 */
	private $lastFormularioRelatedByIdUsuarioCriteria = null;

	/**
	 * @var        array Formulario[] Collection to store aggregation of Formulario objects.
	 */
	protected $collFormulariosRelatedByIdUsuarioCreador;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFormulariosRelatedByIdUsuarioCreador.
	 */
	private $lastFormularioRelatedByIdUsuarioCreadorCriteria = null;

	/**
	 * @var        array Tarea[] Collection to store aggregation of Tarea objects.
	 */
	protected $collTareas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTareas.
	 */
	private $lastTareaCriteria = null;

	/**
	 * @var        array HistoricoDocumento[] Collection to store aggregation of HistoricoDocumento objects.
	 */
	protected $collHistoricoDocumentos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collHistoricoDocumentos.
	 */
	private $lastHistoricoDocumentoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseUsuario object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->alerta_email = false;
	}

	/**
	 * Get the [id_usuario] column value.
	 * 
	 * @return     int
	 */
	public function getIdUsuario()
	{
		return $this->id_usuario;
	}

	/**
	 * Get the [id_idioma] column value.
	 * 
	 * @return     string
	 */
	public function getIdIdioma()
	{
		return $this->id_idioma;
	}

	/**
	 * Get the [usuario] column value.
	 * 
	 * @return     string
	 */
	public function getUsuario()
	{
		return $this->usuario;
	}

	/**
	 * Get the [clave] column value.
	 * 
	 * @return     string
	 */
	public function getClave()
	{
		return $this->clave;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [apellido1] column value.
	 * 
	 * @return     string
	 */
	public function getApellido1()
	{
		return $this->apellido1;
	}

	/**
	 * Get the [apellido2] column value.
	 * 
	 * @return     string
	 */
	public function getApellido2()
	{
		return $this->apellido2;
	}

	/**
	 * Get the [dni] column value.
	 * 
	 * @return     string
	 */
	public function getDni()
	{
		return $this->dni;
	}

	/**
	 * Get the [domicilio] column value.
	 * 
	 * @return     string
	 */
	public function getDomicilio()
	{
		return $this->domicilio;
	}

	/**
	 * Get the [poblacion] column value.
	 * 
	 * @return     string
	 */
	public function getPoblacion()
	{
		return $this->poblacion;
	}

	/**
	 * Get the [cp] column value.
	 * 
	 * @return     int
	 */
	public function getCp()
	{
		return $this->cp;
	}

	/**
	 * Get the [id_provincia] column value.
	 * 
	 * @return     int
	 */
	public function getIdProvincia()
	{
		return $this->id_provincia;
	}

	/**
	 * Get the [pais] column value.
	 * 
	 * @return     string
	 */
	public function getPais()
	{
		return $this->pais;
	}

	/**
	 * Get the [movil] column value.
	 * 
	 * @return     string
	 */
	public function getMovil()
	{
		return $this->movil;
	}

	/**
	 * Get the [telefono] column value.
	 * 
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [optionally formatted] temporal [ultima_visita] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUltimaVisita($format = 'Y-m-d H:i:s')
	{
		if ($this->ultima_visita === null) {
			return null;
		}


		if ($this->ultima_visita === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->ultima_visita);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ultima_visita, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [public_key] column value.
	 * 
	 * @return     string
	 */
	public function getPublicKey()
	{
		return $this->public_key;
	}

	/**
	 * Get the [es_externo] column value.
	 * 
	 * @return     boolean
	 */
	public function getEsExterno()
	{
		return $this->es_externo;
	}

	/**
	 * Get the [alerta_email] column value.
	 * 
	 * @return     boolean
	 */
	public function getAlertaEmail()
	{
		return $this->alerta_email;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_borrado] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaBorrado($format = 'Y-m-d H:i:s')
	{
		if ($this->fecha_borrado === null) {
			return null;
		}


		if ($this->fecha_borrado === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->fecha_borrado);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_borrado, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id_usuario] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setIdUsuario($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_usuario !== $v) {
			$this->id_usuario = $v;
			$this->modifiedColumns[] = UsuarioPeer::ID_USUARIO;
		}

		return $this;
	} // setIdUsuario()

	/**
	 * Set the value of [id_idioma] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setIdIdioma($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id_idioma !== $v) {
			$this->id_idioma = $v;
			$this->modifiedColumns[] = UsuarioPeer::ID_IDIOMA;
		}

		if ($this->aCatalogue !== null && $this->aCatalogue->getCatId() !== $v) {
			$this->aCatalogue = null;
		}

		return $this;
	} // setIdIdioma()

	/**
	 * Set the value of [usuario] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUsuario($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usuario !== $v) {
			$this->usuario = $v;
			$this->modifiedColumns[] = UsuarioPeer::USUARIO;
		}

		return $this;
	} // setUsuario()

	/**
	 * Set the value of [clave] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setClave($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->clave !== $v) {
			$this->clave = $v;
			$this->modifiedColumns[] = UsuarioPeer::CLAVE;
		}

		return $this;
	} // setClave()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = UsuarioPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [apellido1] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setApellido1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellido1 !== $v) {
			$this->apellido1 = $v;
			$this->modifiedColumns[] = UsuarioPeer::APELLIDO1;
		}

		return $this;
	} // setApellido1()

	/**
	 * Set the value of [apellido2] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setApellido2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellido2 !== $v) {
			$this->apellido2 = $v;
			$this->modifiedColumns[] = UsuarioPeer::APELLIDO2;
		}

		return $this;
	} // setApellido2()

	/**
	 * Set the value of [dni] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setDni($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dni !== $v) {
			$this->dni = $v;
			$this->modifiedColumns[] = UsuarioPeer::DNI;
		}

		return $this;
	} // setDni()

	/**
	 * Set the value of [domicilio] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setDomicilio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->domicilio !== $v) {
			$this->domicilio = $v;
			$this->modifiedColumns[] = UsuarioPeer::DOMICILIO;
		}

		return $this;
	} // setDomicilio()

	/**
	 * Set the value of [poblacion] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setPoblacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->poblacion !== $v) {
			$this->poblacion = $v;
			$this->modifiedColumns[] = UsuarioPeer::POBLACION;
		}

		return $this;
	} // setPoblacion()

	/**
	 * Set the value of [cp] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setCp($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cp !== $v) {
			$this->cp = $v;
			$this->modifiedColumns[] = UsuarioPeer::CP;
		}

		return $this;
	} // setCp()

	/**
	 * Set the value of [id_provincia] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setIdProvincia($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_provincia !== $v) {
			$this->id_provincia = $v;
			$this->modifiedColumns[] = UsuarioPeer::ID_PROVINCIA;
		}

		if ($this->aProvincia !== null && $this->aProvincia->getIdProvincia() !== $v) {
			$this->aProvincia = null;
		}

		return $this;
	} // setIdProvincia()

	/**
	 * Set the value of [pais] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setPais($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pais !== $v) {
			$this->pais = $v;
			$this->modifiedColumns[] = UsuarioPeer::PAIS;
		}

		return $this;
	} // setPais()

	/**
	 * Set the value of [movil] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setMovil($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->movil !== $v) {
			$this->movil = $v;
			$this->modifiedColumns[] = UsuarioPeer::MOVIL;
		}

		return $this;
	} // setMovil()

	/**
	 * Set the value of [telefono] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = UsuarioPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = UsuarioPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Sets the value of [ultima_visita] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUltimaVisita($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->ultima_visita !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->ultima_visita !== null && $tmpDt = new DateTime($this->ultima_visita)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->ultima_visita = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsuarioPeer::ULTIMA_VISITA;
			}
		} // if either are not null

		return $this;
	} // setUltimaVisita()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UsuarioPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [public_key] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setPublicKey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->public_key !== $v) {
			$this->public_key = $v;
			$this->modifiedColumns[] = UsuarioPeer::PUBLIC_KEY;
		}

		return $this;
	} // setPublicKey()

	/**
	 * Set the value of [es_externo] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setEsExterno($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->es_externo !== $v) {
			$this->es_externo = $v;
			$this->modifiedColumns[] = UsuarioPeer::ES_EXTERNO;
		}

		return $this;
	} // setEsExterno()

	/**
	 * Set the value of [alerta_email] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setAlertaEmail($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->alerta_email !== $v || $v === false) {
			$this->alerta_email = $v;
			$this->modifiedColumns[] = UsuarioPeer::ALERTA_EMAIL;
		}

		return $this;
	} // setAlertaEmail()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsuarioPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsuarioPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Sets the value of [fecha_borrado] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setFechaBorrado($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_borrado !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_borrado !== null && $tmpDt = new DateTime($this->fecha_borrado)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha_borrado = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsuarioPeer::FECHA_BORRADO;
			}
		} // if either are not null

		return $this;
	} // setFechaBorrado()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(UsuarioPeer::ALERTA_EMAIL))) {
				return false;
			}

			if ($this->alerta_email !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_usuario = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_idioma = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->usuario = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->clave = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->nombre = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->apellido1 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->apellido2 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->dni = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->domicilio = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->poblacion = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->cp = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->id_provincia = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->pais = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->movil = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->telefono = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->fax = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->ultima_visita = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->email = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->public_key = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->es_externo = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
			$this->alerta_email = ($row[$startcol + 20] !== null) ? (boolean) $row[$startcol + 20] : null;
			$this->created_at = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->updated_at = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->fecha_borrado = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 24; // 24 = UsuarioPeer::NUM_COLUMNS - UsuarioPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Usuario object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCatalogue !== null && $this->id_idioma !== $this->aCatalogue->getCatId()) {
			$this->aCatalogue = null;
		}
		if ($this->aProvincia !== null && $this->id_provincia !== $this->aProvincia->getIdProvincia()) {
			$this->aProvincia = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UsuarioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCatalogue = null;
			$this->aProvincia = null;
			$this->collUsuarioGrupos = null;
			$this->lastUsuarioGrupoCriteria = null;

			$this->collAlcances = null;
			$this->lastAlcanceCriteria = null;

			$this->collSesions = null;
			$this->lastSesionCriteria = null;

			$this->collMensajes = null;
			$this->lastMensajeCriteria = null;

			$this->collMensajeDestinos = null;
			$this->lastMensajeDestinoCriteria = null;

			$this->collEmpresas = null;
			$this->lastEmpresaCriteria = null;

			$this->collTablas = null;
			$this->lastTablaCriteria = null;

			$this->collFormulariosRelatedByIdUsuario = null;
			$this->lastFormularioRelatedByIdUsuarioCriteria = null;

			$this->collFormulariosRelatedByIdUsuarioCreador = null;
			$this->lastFormularioRelatedByIdUsuarioCreadorCriteria = null;

			$this->collTareas = null;
			$this->lastTareaCriteria = null;

			$this->collHistoricoDocumentos = null;
			$this->lastHistoricoDocumentoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUsuario:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			UsuarioPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseUsuario:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUsuario:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(UsuarioPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(UsuarioPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseUsuario:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			UsuarioPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCatalogue !== null) {
				if ($this->aCatalogue->isModified() || $this->aCatalogue->isNew()) {
					$affectedRows += $this->aCatalogue->save($con);
				}
				$this->setCatalogue($this->aCatalogue);
			}

			if ($this->aProvincia !== null) {
				if ($this->aProvincia->isModified() || $this->aProvincia->isNew()) {
					$affectedRows += $this->aProvincia->save($con);
				}
				$this->setProvincia($this->aProvincia);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UsuarioPeer::ID_USUARIO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UsuarioPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdUsuario($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UsuarioPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collUsuarioGrupos !== null) {
				foreach ($this->collUsuarioGrupos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlcances !== null) {
				foreach ($this->collAlcances as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSesions !== null) {
				foreach ($this->collSesions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMensajes !== null) {
				foreach ($this->collMensajes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMensajeDestinos !== null) {
				foreach ($this->collMensajeDestinos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmpresas !== null) {
				foreach ($this->collEmpresas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTablas !== null) {
				foreach ($this->collTablas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFormulariosRelatedByIdUsuario !== null) {
				foreach ($this->collFormulariosRelatedByIdUsuario as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFormulariosRelatedByIdUsuarioCreador !== null) {
				foreach ($this->collFormulariosRelatedByIdUsuarioCreador as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTareas !== null) {
				foreach ($this->collTareas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collHistoricoDocumentos !== null) {
				foreach ($this->collHistoricoDocumentos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCatalogue !== null) {
				if (!$this->aCatalogue->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCatalogue->getValidationFailures());
				}
			}

			if ($this->aProvincia !== null) {
				if (!$this->aProvincia->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProvincia->getValidationFailures());
				}
			}


			if (($retval = UsuarioPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collUsuarioGrupos !== null) {
					foreach ($this->collUsuarioGrupos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAlcances !== null) {
					foreach ($this->collAlcances as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSesions !== null) {
					foreach ($this->collSesions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMensajes !== null) {
					foreach ($this->collMensajes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMensajeDestinos !== null) {
					foreach ($this->collMensajeDestinos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmpresas !== null) {
					foreach ($this->collEmpresas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTablas !== null) {
					foreach ($this->collTablas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFormulariosRelatedByIdUsuario !== null) {
					foreach ($this->collFormulariosRelatedByIdUsuario as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFormulariosRelatedByIdUsuarioCreador !== null) {
					foreach ($this->collFormulariosRelatedByIdUsuarioCreador as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTareas !== null) {
					foreach ($this->collTareas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collHistoricoDocumentos !== null) {
					foreach ($this->collHistoricoDocumentos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdUsuario();
				break;
			case 1:
				return $this->getIdIdioma();
				break;
			case 2:
				return $this->getUsuario();
				break;
			case 3:
				return $this->getClave();
				break;
			case 4:
				return $this->getNombre();
				break;
			case 5:
				return $this->getApellido1();
				break;
			case 6:
				return $this->getApellido2();
				break;
			case 7:
				return $this->getDni();
				break;
			case 8:
				return $this->getDomicilio();
				break;
			case 9:
				return $this->getPoblacion();
				break;
			case 10:
				return $this->getCp();
				break;
			case 11:
				return $this->getIdProvincia();
				break;
			case 12:
				return $this->getPais();
				break;
			case 13:
				return $this->getMovil();
				break;
			case 14:
				return $this->getTelefono();
				break;
			case 15:
				return $this->getFax();
				break;
			case 16:
				return $this->getUltimaVisita();
				break;
			case 17:
				return $this->getEmail();
				break;
			case 18:
				return $this->getPublicKey();
				break;
			case 19:
				return $this->getEsExterno();
				break;
			case 20:
				return $this->getAlertaEmail();
				break;
			case 21:
				return $this->getCreatedAt();
				break;
			case 22:
				return $this->getUpdatedAt();
				break;
			case 23:
				return $this->getFechaBorrado();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UsuarioPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdUsuario(),
			$keys[1] => $this->getIdIdioma(),
			$keys[2] => $this->getUsuario(),
			$keys[3] => $this->getClave(),
			$keys[4] => $this->getNombre(),
			$keys[5] => $this->getApellido1(),
			$keys[6] => $this->getApellido2(),
			$keys[7] => $this->getDni(),
			$keys[8] => $this->getDomicilio(),
			$keys[9] => $this->getPoblacion(),
			$keys[10] => $this->getCp(),
			$keys[11] => $this->getIdProvincia(),
			$keys[12] => $this->getPais(),
			$keys[13] => $this->getMovil(),
			$keys[14] => $this->getTelefono(),
			$keys[15] => $this->getFax(),
			$keys[16] => $this->getUltimaVisita(),
			$keys[17] => $this->getEmail(),
			$keys[18] => $this->getPublicKey(),
			$keys[19] => $this->getEsExterno(),
			$keys[20] => $this->getAlertaEmail(),
			$keys[21] => $this->getCreatedAt(),
			$keys[22] => $this->getUpdatedAt(),
			$keys[23] => $this->getFechaBorrado(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdUsuario($value);
				break;
			case 1:
				$this->setIdIdioma($value);
				break;
			case 2:
				$this->setUsuario($value);
				break;
			case 3:
				$this->setClave($value);
				break;
			case 4:
				$this->setNombre($value);
				break;
			case 5:
				$this->setApellido1($value);
				break;
			case 6:
				$this->setApellido2($value);
				break;
			case 7:
				$this->setDni($value);
				break;
			case 8:
				$this->setDomicilio($value);
				break;
			case 9:
				$this->setPoblacion($value);
				break;
			case 10:
				$this->setCp($value);
				break;
			case 11:
				$this->setIdProvincia($value);
				break;
			case 12:
				$this->setPais($value);
				break;
			case 13:
				$this->setMovil($value);
				break;
			case 14:
				$this->setTelefono($value);
				break;
			case 15:
				$this->setFax($value);
				break;
			case 16:
				$this->setUltimaVisita($value);
				break;
			case 17:
				$this->setEmail($value);
				break;
			case 18:
				$this->setPublicKey($value);
				break;
			case 19:
				$this->setEsExterno($value);
				break;
			case 20:
				$this->setAlertaEmail($value);
				break;
			case 21:
				$this->setCreatedAt($value);
				break;
			case 22:
				$this->setUpdatedAt($value);
				break;
			case 23:
				$this->setFechaBorrado($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UsuarioPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdUsuario($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdIdioma($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setUsuario($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setClave($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNombre($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setApellido1($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setApellido2($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDni($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDomicilio($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPoblacion($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCp($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setIdProvincia($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPais($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setMovil($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTelefono($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFax($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setUltimaVisita($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setEmail($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPublicKey($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setEsExterno($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAlertaEmail($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCreatedAt($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setUpdatedAt($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setFechaBorrado($arr[$keys[23]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsuarioPeer::ID_USUARIO)) $criteria->add(UsuarioPeer::ID_USUARIO, $this->id_usuario);
		if ($this->isColumnModified(UsuarioPeer::ID_IDIOMA)) $criteria->add(UsuarioPeer::ID_IDIOMA, $this->id_idioma);
		if ($this->isColumnModified(UsuarioPeer::USUARIO)) $criteria->add(UsuarioPeer::USUARIO, $this->usuario);
		if ($this->isColumnModified(UsuarioPeer::CLAVE)) $criteria->add(UsuarioPeer::CLAVE, $this->clave);
		if ($this->isColumnModified(UsuarioPeer::NOMBRE)) $criteria->add(UsuarioPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(UsuarioPeer::APELLIDO1)) $criteria->add(UsuarioPeer::APELLIDO1, $this->apellido1);
		if ($this->isColumnModified(UsuarioPeer::APELLIDO2)) $criteria->add(UsuarioPeer::APELLIDO2, $this->apellido2);
		if ($this->isColumnModified(UsuarioPeer::DNI)) $criteria->add(UsuarioPeer::DNI, $this->dni);
		if ($this->isColumnModified(UsuarioPeer::DOMICILIO)) $criteria->add(UsuarioPeer::DOMICILIO, $this->domicilio);
		if ($this->isColumnModified(UsuarioPeer::POBLACION)) $criteria->add(UsuarioPeer::POBLACION, $this->poblacion);
		if ($this->isColumnModified(UsuarioPeer::CP)) $criteria->add(UsuarioPeer::CP, $this->cp);
		if ($this->isColumnModified(UsuarioPeer::ID_PROVINCIA)) $criteria->add(UsuarioPeer::ID_PROVINCIA, $this->id_provincia);
		if ($this->isColumnModified(UsuarioPeer::PAIS)) $criteria->add(UsuarioPeer::PAIS, $this->pais);
		if ($this->isColumnModified(UsuarioPeer::MOVIL)) $criteria->add(UsuarioPeer::MOVIL, $this->movil);
		if ($this->isColumnModified(UsuarioPeer::TELEFONO)) $criteria->add(UsuarioPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(UsuarioPeer::FAX)) $criteria->add(UsuarioPeer::FAX, $this->fax);
		if ($this->isColumnModified(UsuarioPeer::ULTIMA_VISITA)) $criteria->add(UsuarioPeer::ULTIMA_VISITA, $this->ultima_visita);
		if ($this->isColumnModified(UsuarioPeer::EMAIL)) $criteria->add(UsuarioPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UsuarioPeer::PUBLIC_KEY)) $criteria->add(UsuarioPeer::PUBLIC_KEY, $this->public_key);
		if ($this->isColumnModified(UsuarioPeer::ES_EXTERNO)) $criteria->add(UsuarioPeer::ES_EXTERNO, $this->es_externo);
		if ($this->isColumnModified(UsuarioPeer::ALERTA_EMAIL)) $criteria->add(UsuarioPeer::ALERTA_EMAIL, $this->alerta_email);
		if ($this->isColumnModified(UsuarioPeer::CREATED_AT)) $criteria->add(UsuarioPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(UsuarioPeer::UPDATED_AT)) $criteria->add(UsuarioPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(UsuarioPeer::FECHA_BORRADO)) $criteria->add(UsuarioPeer::FECHA_BORRADO, $this->fecha_borrado);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);

		$criteria->add(UsuarioPeer::ID_USUARIO, $this->id_usuario);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdUsuario();
	}

	/**
	 * Generic method to set the primary key (id_usuario column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdUsuario($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Usuario (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdIdioma($this->id_idioma);

		$copyObj->setUsuario($this->usuario);

		$copyObj->setClave($this->clave);

		$copyObj->setNombre($this->nombre);

		$copyObj->setApellido1($this->apellido1);

		$copyObj->setApellido2($this->apellido2);

		$copyObj->setDni($this->dni);

		$copyObj->setDomicilio($this->domicilio);

		$copyObj->setPoblacion($this->poblacion);

		$copyObj->setCp($this->cp);

		$copyObj->setIdProvincia($this->id_provincia);

		$copyObj->setPais($this->pais);

		$copyObj->setMovil($this->movil);

		$copyObj->setTelefono($this->telefono);

		$copyObj->setFax($this->fax);

		$copyObj->setUltimaVisita($this->ultima_visita);

		$copyObj->setEmail($this->email);

		$copyObj->setPublicKey($this->public_key);

		$copyObj->setEsExterno($this->es_externo);

		$copyObj->setAlertaEmail($this->alerta_email);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setFechaBorrado($this->fecha_borrado);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getUsuarioGrupos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsuarioGrupo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlcances() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlcance($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSesions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSesion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMensajes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMensaje($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMensajeDestinos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMensajeDestino($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmpresas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmpresa($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTablas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTabla($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFormulariosRelatedByIdUsuario() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFormularioRelatedByIdUsuario($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFormulariosRelatedByIdUsuarioCreador() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFormularioRelatedByIdUsuarioCreador($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTareas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTarea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getHistoricoDocumentos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addHistoricoDocumento($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdUsuario(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Usuario Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UsuarioPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsuarioPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Catalogue object.
	 *
	 * @param      Catalogue $v
	 * @return     Usuario The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCatalogue(Catalogue $v = null)
	{
		if ($v === null) {
			$this->setIdIdioma(NULL);
		} else {
			$this->setIdIdioma($v->getCatId());
		}

		$this->aCatalogue = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Catalogue object, it will not be re-added.
		if ($v !== null) {
			$v->addUsuario($this);
		}

		return $this;
	}


	/**
	 * Get the associated Catalogue object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Catalogue The associated Catalogue object.
	 * @throws     PropelException
	 */
	public function getCatalogue(PropelPDO $con = null)
	{
		if ($this->aCatalogue === null && (($this->id_idioma !== "" && $this->id_idioma !== null))) {
			$c = new Criteria(CataloguePeer::DATABASE_NAME);
			$c->add(CataloguePeer::CAT_ID, $this->id_idioma);
			$this->aCatalogue = CataloguePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCatalogue->addUsuarios($this);
			 */
		}
		return $this->aCatalogue;
	}

	/**
	 * Declares an association between this object and a Provincia object.
	 *
	 * @param      Provincia $v
	 * @return     Usuario The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProvincia(Provincia $v = null)
	{
		if ($v === null) {
			$this->setIdProvincia(NULL);
		} else {
			$this->setIdProvincia($v->getIdProvincia());
		}

		$this->aProvincia = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Provincia object, it will not be re-added.
		if ($v !== null) {
			$v->addUsuario($this);
		}

		return $this;
	}


	/**
	 * Get the associated Provincia object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Provincia The associated Provincia object.
	 * @throws     PropelException
	 */
	public function getProvincia(PropelPDO $con = null)
	{
		if ($this->aProvincia === null && ($this->id_provincia !== null)) {
			$c = new Criteria(ProvinciaPeer::DATABASE_NAME);
			$c->add(ProvinciaPeer::ID_PROVINCIA, $this->id_provincia);
			$this->aProvincia = ProvinciaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProvincia->addUsuarios($this);
			 */
		}
		return $this->aProvincia;
	}

	/**
	 * Clears out the collUsuarioGrupos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsuarioGrupos()
	 */
	public function clearUsuarioGrupos()
	{
		$this->collUsuarioGrupos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsuarioGrupos collection (array).
	 *
	 * By default this just sets the collUsuarioGrupos collection to an empty array (like clearcollUsuarioGrupos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsuarioGrupos()
	{
		$this->collUsuarioGrupos = array();
	}

	/**
	 * Gets an array of UsuarioGrupo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related UsuarioGrupos from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsuarioGrupo[]
	 * @throws     PropelException
	 */
	public function getUsuarioGrupos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarioGrupos === null) {
			if ($this->isNew()) {
			   $this->collUsuarioGrupos = array();
			} else {

				$criteria->add(UsuarioGrupoPeer::ID_USUARIO, $this->id_usuario);

				UsuarioGrupoPeer::addSelectColumns($criteria);
				$this->collUsuarioGrupos = UsuarioGrupoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsuarioGrupoPeer::ID_USUARIO, $this->id_usuario);

				UsuarioGrupoPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsuarioGrupoCriteria) || !$this->lastUsuarioGrupoCriteria->equals($criteria)) {
					$this->collUsuarioGrupos = UsuarioGrupoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsuarioGrupoCriteria = $criteria;
		return $this->collUsuarioGrupos;
	}

	/**
	 * Returns the number of related UsuarioGrupo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsuarioGrupo objects.
	 * @throws     PropelException
	 */
	public function countUsuarioGrupos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsuarioGrupos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsuarioGrupoPeer::ID_USUARIO, $this->id_usuario);

				$count = UsuarioGrupoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsuarioGrupoPeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastUsuarioGrupoCriteria) || !$this->lastUsuarioGrupoCriteria->equals($criteria)) {
					$count = UsuarioGrupoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUsuarioGrupos);
				}
			} else {
				$count = count($this->collUsuarioGrupos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsuarioGrupo object to this object
	 * through the UsuarioGrupo foreign key attribute.
	 *
	 * @param      UsuarioGrupo $l UsuarioGrupo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsuarioGrupo(UsuarioGrupo $l)
	{
		if ($this->collUsuarioGrupos === null) {
			$this->initUsuarioGrupos();
		}
		if (!in_array($l, $this->collUsuarioGrupos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsuarioGrupos, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related UsuarioGrupos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getUsuarioGruposJoinGrupo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsuarioGrupos === null) {
			if ($this->isNew()) {
				$this->collUsuarioGrupos = array();
			} else {

				$criteria->add(UsuarioGrupoPeer::ID_USUARIO, $this->id_usuario);

				$this->collUsuarioGrupos = UsuarioGrupoPeer::doSelectJoinGrupo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsuarioGrupoPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastUsuarioGrupoCriteria) || !$this->lastUsuarioGrupoCriteria->equals($criteria)) {
				$this->collUsuarioGrupos = UsuarioGrupoPeer::doSelectJoinGrupo($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsuarioGrupoCriteria = $criteria;

		return $this->collUsuarioGrupos;
	}

	/**
	 * Clears out the collAlcances collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlcances()
	 */
	public function clearAlcances()
	{
		$this->collAlcances = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlcances collection (array).
	 *
	 * By default this just sets the collAlcances collection to an empty array (like clearcollAlcances());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlcances()
	{
		$this->collAlcances = array();
	}

	/**
	 * Gets an array of Alcance objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related Alcances from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Alcance[]
	 * @throws     PropelException
	 */
	public function getAlcances($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlcances === null) {
			if ($this->isNew()) {
			   $this->collAlcances = array();
			} else {

				$criteria->add(AlcancePeer::ID_USUARIO, $this->id_usuario);

				AlcancePeer::addSelectColumns($criteria);
				$this->collAlcances = AlcancePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlcancePeer::ID_USUARIO, $this->id_usuario);

				AlcancePeer::addSelectColumns($criteria);
				if (!isset($this->lastAlcanceCriteria) || !$this->lastAlcanceCriteria->equals($criteria)) {
					$this->collAlcances = AlcancePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlcanceCriteria = $criteria;
		return $this->collAlcances;
	}

	/**
	 * Returns the number of related Alcance objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Alcance objects.
	 * @throws     PropelException
	 */
	public function countAlcances(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlcances === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlcancePeer::ID_USUARIO, $this->id_usuario);

				$count = AlcancePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlcancePeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastAlcanceCriteria) || !$this->lastAlcanceCriteria->equals($criteria)) {
					$count = AlcancePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAlcances);
				}
			} else {
				$count = count($this->collAlcances);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Alcance object to this object
	 * through the Alcance foreign key attribute.
	 *
	 * @param      Alcance $l Alcance
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlcance(Alcance $l)
	{
		if ($this->collAlcances === null) {
			$this->initAlcances();
		}
		if (!in_array($l, $this->collAlcances, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlcances, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Alcances from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getAlcancesJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlcances === null) {
			if ($this->isNew()) {
				$this->collAlcances = array();
			} else {

				$criteria->add(AlcancePeer::ID_USUARIO, $this->id_usuario);

				$this->collAlcances = AlcancePeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlcancePeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastAlcanceCriteria) || !$this->lastAlcanceCriteria->equals($criteria)) {
				$this->collAlcances = AlcancePeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlcanceCriteria = $criteria;

		return $this->collAlcances;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Alcances from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getAlcancesJoinTabla($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlcances === null) {
			if ($this->isNew()) {
				$this->collAlcances = array();
			} else {

				$criteria->add(AlcancePeer::ID_USUARIO, $this->id_usuario);

				$this->collAlcances = AlcancePeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlcancePeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastAlcanceCriteria) || !$this->lastAlcanceCriteria->equals($criteria)) {
				$this->collAlcances = AlcancePeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlcanceCriteria = $criteria;

		return $this->collAlcances;
	}

	/**
	 * Clears out the collSesions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSesions()
	 */
	public function clearSesions()
	{
		$this->collSesions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSesions collection (array).
	 *
	 * By default this just sets the collSesions collection to an empty array (like clearcollSesions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSesions()
	{
		$this->collSesions = array();
	}

	/**
	 * Gets an array of Sesion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related Sesions from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Sesion[]
	 * @throws     PropelException
	 */
	public function getSesions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSesions === null) {
			if ($this->isNew()) {
			   $this->collSesions = array();
			} else {

				$criteria->add(SesionPeer::ID_USUARIO, $this->id_usuario);

				SesionPeer::addSelectColumns($criteria);
				$this->collSesions = SesionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SesionPeer::ID_USUARIO, $this->id_usuario);

				SesionPeer::addSelectColumns($criteria);
				if (!isset($this->lastSesionCriteria) || !$this->lastSesionCriteria->equals($criteria)) {
					$this->collSesions = SesionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSesionCriteria = $criteria;
		return $this->collSesions;
	}

	/**
	 * Returns the number of related Sesion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Sesion objects.
	 * @throws     PropelException
	 */
	public function countSesions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSesions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SesionPeer::ID_USUARIO, $this->id_usuario);

				$count = SesionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SesionPeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastSesionCriteria) || !$this->lastSesionCriteria->equals($criteria)) {
					$count = SesionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSesions);
				}
			} else {
				$count = count($this->collSesions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Sesion object to this object
	 * through the Sesion foreign key attribute.
	 *
	 * @param      Sesion $l Sesion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSesion(Sesion $l)
	{
		if ($this->collSesions === null) {
			$this->initSesions();
		}
		if (!in_array($l, $this->collSesions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSesions, $l);
			$l->setUsuario($this);
		}
	}

	/**
	 * Clears out the collMensajes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMensajes()
	 */
	public function clearMensajes()
	{
		$this->collMensajes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMensajes collection (array).
	 *
	 * By default this just sets the collMensajes collection to an empty array (like clearcollMensajes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMensajes()
	{
		$this->collMensajes = array();
	}

	/**
	 * Gets an array of Mensaje objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related Mensajes from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Mensaje[]
	 * @throws     PropelException
	 */
	public function getMensajes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMensajes === null) {
			if ($this->isNew()) {
			   $this->collMensajes = array();
			} else {

				$criteria->add(MensajePeer::ID_USUARIO, $this->id_usuario);

				MensajePeer::addSelectColumns($criteria);
				$this->collMensajes = MensajePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MensajePeer::ID_USUARIO, $this->id_usuario);

				MensajePeer::addSelectColumns($criteria);
				if (!isset($this->lastMensajeCriteria) || !$this->lastMensajeCriteria->equals($criteria)) {
					$this->collMensajes = MensajePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMensajeCriteria = $criteria;
		return $this->collMensajes;
	}

	/**
	 * Returns the number of related Mensaje objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Mensaje objects.
	 * @throws     PropelException
	 */
	public function countMensajes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMensajes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MensajePeer::ID_USUARIO, $this->id_usuario);

				$count = MensajePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MensajePeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastMensajeCriteria) || !$this->lastMensajeCriteria->equals($criteria)) {
					$count = MensajePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMensajes);
				}
			} else {
				$count = count($this->collMensajes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Mensaje object to this object
	 * through the Mensaje foreign key attribute.
	 *
	 * @param      Mensaje $l Mensaje
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMensaje(Mensaje $l)
	{
		if ($this->collMensajes === null) {
			$this->initMensajes();
		}
		if (!in_array($l, $this->collMensajes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMensajes, $l);
			$l->setUsuario($this);
		}
	}

	/**
	 * Clears out the collMensajeDestinos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMensajeDestinos()
	 */
	public function clearMensajeDestinos()
	{
		$this->collMensajeDestinos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMensajeDestinos collection (array).
	 *
	 * By default this just sets the collMensajeDestinos collection to an empty array (like clearcollMensajeDestinos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMensajeDestinos()
	{
		$this->collMensajeDestinos = array();
	}

	/**
	 * Gets an array of MensajeDestino objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related MensajeDestinos from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MensajeDestino[]
	 * @throws     PropelException
	 */
	public function getMensajeDestinos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMensajeDestinos === null) {
			if ($this->isNew()) {
			   $this->collMensajeDestinos = array();
			} else {

				$criteria->add(MensajeDestinoPeer::ID_USUARIO, $this->id_usuario);

				MensajeDestinoPeer::addSelectColumns($criteria);
				$this->collMensajeDestinos = MensajeDestinoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MensajeDestinoPeer::ID_USUARIO, $this->id_usuario);

				MensajeDestinoPeer::addSelectColumns($criteria);
				if (!isset($this->lastMensajeDestinoCriteria) || !$this->lastMensajeDestinoCriteria->equals($criteria)) {
					$this->collMensajeDestinos = MensajeDestinoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMensajeDestinoCriteria = $criteria;
		return $this->collMensajeDestinos;
	}

	/**
	 * Returns the number of related MensajeDestino objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MensajeDestino objects.
	 * @throws     PropelException
	 */
	public function countMensajeDestinos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMensajeDestinos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MensajeDestinoPeer::ID_USUARIO, $this->id_usuario);

				$count = MensajeDestinoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MensajeDestinoPeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastMensajeDestinoCriteria) || !$this->lastMensajeDestinoCriteria->equals($criteria)) {
					$count = MensajeDestinoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMensajeDestinos);
				}
			} else {
				$count = count($this->collMensajeDestinos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MensajeDestino object to this object
	 * through the MensajeDestino foreign key attribute.
	 *
	 * @param      MensajeDestino $l MensajeDestino
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMensajeDestino(MensajeDestino $l)
	{
		if ($this->collMensajeDestinos === null) {
			$this->initMensajeDestinos();
		}
		if (!in_array($l, $this->collMensajeDestinos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMensajeDestinos, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related MensajeDestinos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getMensajeDestinosJoinMensaje($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMensajeDestinos === null) {
			if ($this->isNew()) {
				$this->collMensajeDestinos = array();
			} else {

				$criteria->add(MensajeDestinoPeer::ID_USUARIO, $this->id_usuario);

				$this->collMensajeDestinos = MensajeDestinoPeer::doSelectJoinMensaje($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MensajeDestinoPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastMensajeDestinoCriteria) || !$this->lastMensajeDestinoCriteria->equals($criteria)) {
				$this->collMensajeDestinos = MensajeDestinoPeer::doSelectJoinMensaje($criteria, $con, $join_behavior);
			}
		}
		$this->lastMensajeDestinoCriteria = $criteria;

		return $this->collMensajeDestinos;
	}

	/**
	 * Clears out the collEmpresas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmpresas()
	 */
	public function clearEmpresas()
	{
		$this->collEmpresas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmpresas collection (array).
	 *
	 * By default this just sets the collEmpresas collection to an empty array (like clearcollEmpresas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmpresas()
	{
		$this->collEmpresas = array();
	}

	/**
	 * Gets an array of Empresa objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related Empresas from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Empresa[]
	 * @throws     PropelException
	 */
	public function getEmpresas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpresas === null) {
			if ($this->isNew()) {
			   $this->collEmpresas = array();
			} else {

				$criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);

				EmpresaPeer::addSelectColumns($criteria);
				$this->collEmpresas = EmpresaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);

				EmpresaPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmpresaCriteria) || !$this->lastEmpresaCriteria->equals($criteria)) {
					$this->collEmpresas = EmpresaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmpresaCriteria = $criteria;
		return $this->collEmpresas;
	}

	/**
	 * Returns the number of related Empresa objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Empresa objects.
	 * @throws     PropelException
	 */
	public function countEmpresas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmpresas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);

				$count = EmpresaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastEmpresaCriteria) || !$this->lastEmpresaCriteria->equals($criteria)) {
					$count = EmpresaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmpresas);
				}
			} else {
				$count = count($this->collEmpresas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Empresa object to this object
	 * through the Empresa foreign key attribute.
	 *
	 * @param      Empresa $l Empresa
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmpresa(Empresa $l)
	{
		if ($this->collEmpresas === null) {
			$this->initEmpresas();
		}
		if (!in_array($l, $this->collEmpresas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmpresas, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Empresas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEmpresasJoinProvincia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpresas === null) {
			if ($this->isNew()) {
				$this->collEmpresas = array();
			} else {

				$criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);

				$this->collEmpresas = EmpresaPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastEmpresaCriteria) || !$this->lastEmpresaCriteria->equals($criteria)) {
				$this->collEmpresas = EmpresaPeer::doSelectJoinProvincia($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpresaCriteria = $criteria;

		return $this->collEmpresas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Empresas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getEmpresasJoinTaula1($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmpresas === null) {
			if ($this->isNew()) {
				$this->collEmpresas = array();
			} else {

				$criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);

				$this->collEmpresas = EmpresaPeer::doSelectJoinTaula1($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastEmpresaCriteria) || !$this->lastEmpresaCriteria->equals($criteria)) {
				$this->collEmpresas = EmpresaPeer::doSelectJoinTaula1($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmpresaCriteria = $criteria;

		return $this->collEmpresas;
	}

	/**
	 * Clears out the collTablas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTablas()
	 */
	public function clearTablas()
	{
		$this->collTablas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTablas collection (array).
	 *
	 * By default this just sets the collTablas collection to an empty array (like clearcollTablas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTablas()
	{
		$this->collTablas = array();
	}

	/**
	 * Gets an array of Tabla objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related Tablas from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tabla[]
	 * @throws     PropelException
	 */
	public function getTablas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
			   $this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_USUARIO, $this->id_usuario);

				TablaPeer::addSelectColumns($criteria);
				$this->collTablas = TablaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TablaPeer::ID_USUARIO, $this->id_usuario);

				TablaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
					$this->collTablas = TablaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTablaCriteria = $criteria;
		return $this->collTablas;
	}

	/**
	 * Returns the number of related Tabla objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tabla objects.
	 * @throws     PropelException
	 */
	public function countTablas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TablaPeer::ID_USUARIO, $this->id_usuario);

				$count = TablaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TablaPeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
					$count = TablaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTablas);
				}
			} else {
				$count = count($this->collTablas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tabla object to this object
	 * through the Tabla foreign key attribute.
	 *
	 * @param      Tabla $l Tabla
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTabla(Tabla $l)
	{
		if ($this->collTablas === null) {
			$this->initTablas();
		}
		if (!in_array($l, $this->collTablas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTablas, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Tablas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getTablasJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_USUARIO, $this->id_usuario);

				$this->collTablas = TablaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TablaPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
				$this->collTablas = TablaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastTablaCriteria = $criteria;

		return $this->collTablas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Tablas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getTablasJoinParametro($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_USUARIO, $this->id_usuario);

				$this->collTablas = TablaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TablaPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
				$this->collTablas = TablaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		}
		$this->lastTablaCriteria = $criteria;

		return $this->collTablas;
	}

	/**
	 * Clears out the collFormulariosRelatedByIdUsuario collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFormulariosRelatedByIdUsuario()
	 */
	public function clearFormulariosRelatedByIdUsuario()
	{
		$this->collFormulariosRelatedByIdUsuario = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFormulariosRelatedByIdUsuario collection (array).
	 *
	 * By default this just sets the collFormulariosRelatedByIdUsuario collection to an empty array (like clearcollFormulariosRelatedByIdUsuario());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFormulariosRelatedByIdUsuario()
	{
		$this->collFormulariosRelatedByIdUsuario = array();
	}

	/**
	 * Gets an array of Formulario objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related FormulariosRelatedByIdUsuario from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Formulario[]
	 * @throws     PropelException
	 */
	public function getFormulariosRelatedByIdUsuario($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFormulariosRelatedByIdUsuario === null) {
			if ($this->isNew()) {
			   $this->collFormulariosRelatedByIdUsuario = array();
			} else {

				$criteria->add(FormularioPeer::ID_USUARIO, $this->id_usuario);

				FormularioPeer::addSelectColumns($criteria);
				$this->collFormulariosRelatedByIdUsuario = FormularioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FormularioPeer::ID_USUARIO, $this->id_usuario);

				FormularioPeer::addSelectColumns($criteria);
				if (!isset($this->lastFormularioRelatedByIdUsuarioCriteria) || !$this->lastFormularioRelatedByIdUsuarioCriteria->equals($criteria)) {
					$this->collFormulariosRelatedByIdUsuario = FormularioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFormularioRelatedByIdUsuarioCriteria = $criteria;
		return $this->collFormulariosRelatedByIdUsuario;
	}

	/**
	 * Returns the number of related Formulario objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Formulario objects.
	 * @throws     PropelException
	 */
	public function countFormulariosRelatedByIdUsuario(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFormulariosRelatedByIdUsuario === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FormularioPeer::ID_USUARIO, $this->id_usuario);

				$count = FormularioPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FormularioPeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastFormularioRelatedByIdUsuarioCriteria) || !$this->lastFormularioRelatedByIdUsuarioCriteria->equals($criteria)) {
					$count = FormularioPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collFormulariosRelatedByIdUsuario);
				}
			} else {
				$count = count($this->collFormulariosRelatedByIdUsuario);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Formulario object to this object
	 * through the Formulario foreign key attribute.
	 *
	 * @param      Formulario $l Formulario
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFormularioRelatedByIdUsuario(Formulario $l)
	{
		if ($this->collFormulariosRelatedByIdUsuario === null) {
			$this->initFormulariosRelatedByIdUsuario();
		}
		if (!in_array($l, $this->collFormulariosRelatedByIdUsuario, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFormulariosRelatedByIdUsuario, $l);
			$l->setUsuarioRelatedByIdUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related FormulariosRelatedByIdUsuario from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getFormulariosRelatedByIdUsuarioJoinTabla($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFormulariosRelatedByIdUsuario === null) {
			if ($this->isNew()) {
				$this->collFormulariosRelatedByIdUsuario = array();
			} else {

				$criteria->add(FormularioPeer::ID_USUARIO, $this->id_usuario);

				$this->collFormulariosRelatedByIdUsuario = FormularioPeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FormularioPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastFormularioRelatedByIdUsuarioCriteria) || !$this->lastFormularioRelatedByIdUsuarioCriteria->equals($criteria)) {
				$this->collFormulariosRelatedByIdUsuario = FormularioPeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		}
		$this->lastFormularioRelatedByIdUsuarioCriteria = $criteria;

		return $this->collFormulariosRelatedByIdUsuario;
	}

	/**
	 * Clears out the collFormulariosRelatedByIdUsuarioCreador collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFormulariosRelatedByIdUsuarioCreador()
	 */
	public function clearFormulariosRelatedByIdUsuarioCreador()
	{
		$this->collFormulariosRelatedByIdUsuarioCreador = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFormulariosRelatedByIdUsuarioCreador collection (array).
	 *
	 * By default this just sets the collFormulariosRelatedByIdUsuarioCreador collection to an empty array (like clearcollFormulariosRelatedByIdUsuarioCreador());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFormulariosRelatedByIdUsuarioCreador()
	{
		$this->collFormulariosRelatedByIdUsuarioCreador = array();
	}

	/**
	 * Gets an array of Formulario objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related FormulariosRelatedByIdUsuarioCreador from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Formulario[]
	 * @throws     PropelException
	 */
	public function getFormulariosRelatedByIdUsuarioCreador($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFormulariosRelatedByIdUsuarioCreador === null) {
			if ($this->isNew()) {
			   $this->collFormulariosRelatedByIdUsuarioCreador = array();
			} else {

				$criteria->add(FormularioPeer::ID_USUARIO_CREADOR, $this->id_usuario);

				FormularioPeer::addSelectColumns($criteria);
				$this->collFormulariosRelatedByIdUsuarioCreador = FormularioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FormularioPeer::ID_USUARIO_CREADOR, $this->id_usuario);

				FormularioPeer::addSelectColumns($criteria);
				if (!isset($this->lastFormularioRelatedByIdUsuarioCreadorCriteria) || !$this->lastFormularioRelatedByIdUsuarioCreadorCriteria->equals($criteria)) {
					$this->collFormulariosRelatedByIdUsuarioCreador = FormularioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFormularioRelatedByIdUsuarioCreadorCriteria = $criteria;
		return $this->collFormulariosRelatedByIdUsuarioCreador;
	}

	/**
	 * Returns the number of related Formulario objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Formulario objects.
	 * @throws     PropelException
	 */
	public function countFormulariosRelatedByIdUsuarioCreador(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFormulariosRelatedByIdUsuarioCreador === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FormularioPeer::ID_USUARIO_CREADOR, $this->id_usuario);

				$count = FormularioPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FormularioPeer::ID_USUARIO_CREADOR, $this->id_usuario);

				if (!isset($this->lastFormularioRelatedByIdUsuarioCreadorCriteria) || !$this->lastFormularioRelatedByIdUsuarioCreadorCriteria->equals($criteria)) {
					$count = FormularioPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collFormulariosRelatedByIdUsuarioCreador);
				}
			} else {
				$count = count($this->collFormulariosRelatedByIdUsuarioCreador);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Formulario object to this object
	 * through the Formulario foreign key attribute.
	 *
	 * @param      Formulario $l Formulario
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFormularioRelatedByIdUsuarioCreador(Formulario $l)
	{
		if ($this->collFormulariosRelatedByIdUsuarioCreador === null) {
			$this->initFormulariosRelatedByIdUsuarioCreador();
		}
		if (!in_array($l, $this->collFormulariosRelatedByIdUsuarioCreador, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFormulariosRelatedByIdUsuarioCreador, $l);
			$l->setUsuarioRelatedByIdUsuarioCreador($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related FormulariosRelatedByIdUsuarioCreador from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getFormulariosRelatedByIdUsuarioCreadorJoinTabla($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFormulariosRelatedByIdUsuarioCreador === null) {
			if ($this->isNew()) {
				$this->collFormulariosRelatedByIdUsuarioCreador = array();
			} else {

				$criteria->add(FormularioPeer::ID_USUARIO_CREADOR, $this->id_usuario);

				$this->collFormulariosRelatedByIdUsuarioCreador = FormularioPeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FormularioPeer::ID_USUARIO_CREADOR, $this->id_usuario);

			if (!isset($this->lastFormularioRelatedByIdUsuarioCreadorCriteria) || !$this->lastFormularioRelatedByIdUsuarioCreadorCriteria->equals($criteria)) {
				$this->collFormulariosRelatedByIdUsuarioCreador = FormularioPeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		}
		$this->lastFormularioRelatedByIdUsuarioCreadorCriteria = $criteria;

		return $this->collFormulariosRelatedByIdUsuarioCreador;
	}

	/**
	 * Clears out the collTareas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTareas()
	 */
	public function clearTareas()
	{
		$this->collTareas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTareas collection (array).
	 *
	 * By default this just sets the collTareas collection to an empty array (like clearcollTareas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTareas()
	{
		$this->collTareas = array();
	}

	/**
	 * Gets an array of Tarea objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related Tareas from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tarea[]
	 * @throws     PropelException
	 */
	public function getTareas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
			   $this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

				TareaPeer::addSelectColumns($criteria);
				$this->collTareas = TareaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

				TareaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
					$this->collTareas = TareaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTareaCriteria = $criteria;
		return $this->collTareas;
	}

	/**
	 * Returns the number of related Tarea objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tarea objects.
	 * @throws     PropelException
	 */
	public function countTareas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

				$count = TareaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
					$count = TareaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTareas);
				}
			} else {
				$count = count($this->collTareas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tarea object to this object
	 * through the Tarea foreign key attribute.
	 *
	 * @param      Tarea $l Tarea
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTarea(Tarea $l)
	{
		if ($this->collTareas === null) {
			$this->initTareas();
		}
		if (!in_array($l, $this->collTareas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTareas, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getTareasJoinFormulario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

				$this->collTareas = TareaPeer::doSelectJoinFormulario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinFormulario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getTareasJoinCampo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

				$this->collTareas = TareaPeer::doSelectJoinCampo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinCampo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getTareasJoinParametro($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

				$this->collTareas = TareaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getTareasJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

				$this->collTareas = TareaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}

	/**
	 * Clears out the collHistoricoDocumentos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addHistoricoDocumentos()
	 */
	public function clearHistoricoDocumentos()
	{
		$this->collHistoricoDocumentos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collHistoricoDocumentos collection (array).
	 *
	 * By default this just sets the collHistoricoDocumentos collection to an empty array (like clearcollHistoricoDocumentos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initHistoricoDocumentos()
	{
		$this->collHistoricoDocumentos = array();
	}

	/**
	 * Gets an array of HistoricoDocumento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Usuario has previously been saved, it will retrieve
	 * related HistoricoDocumentos from storage. If this Usuario is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array HistoricoDocumento[]
	 * @throws     PropelException
	 */
	public function getHistoricoDocumentos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHistoricoDocumentos === null) {
			if ($this->isNew()) {
			   $this->collHistoricoDocumentos = array();
			} else {

				$criteria->add(HistoricoDocumentoPeer::ID_USUARIO, $this->id_usuario);

				HistoricoDocumentoPeer::addSelectColumns($criteria);
				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(HistoricoDocumentoPeer::ID_USUARIO, $this->id_usuario);

				HistoricoDocumentoPeer::addSelectColumns($criteria);
				if (!isset($this->lastHistoricoDocumentoCriteria) || !$this->lastHistoricoDocumentoCriteria->equals($criteria)) {
					$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastHistoricoDocumentoCriteria = $criteria;
		return $this->collHistoricoDocumentos;
	}

	/**
	 * Returns the number of related HistoricoDocumento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related HistoricoDocumento objects.
	 * @throws     PropelException
	 */
	public function countHistoricoDocumentos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collHistoricoDocumentos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(HistoricoDocumentoPeer::ID_USUARIO, $this->id_usuario);

				$count = HistoricoDocumentoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(HistoricoDocumentoPeer::ID_USUARIO, $this->id_usuario);

				if (!isset($this->lastHistoricoDocumentoCriteria) || !$this->lastHistoricoDocumentoCriteria->equals($criteria)) {
					$count = HistoricoDocumentoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collHistoricoDocumentos);
				}
			} else {
				$count = count($this->collHistoricoDocumentos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a HistoricoDocumento object to this object
	 * through the HistoricoDocumento foreign key attribute.
	 *
	 * @param      HistoricoDocumento $l HistoricoDocumento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHistoricoDocumento(HistoricoDocumento $l)
	{
		if ($this->collHistoricoDocumentos === null) {
			$this->initHistoricoDocumentos();
		}
		if (!in_array($l, $this->collHistoricoDocumentos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collHistoricoDocumentos, $l);
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related HistoricoDocumentos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getHistoricoDocumentosJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHistoricoDocumentos === null) {
			if ($this->isNew()) {
				$this->collHistoricoDocumentos = array();
			} else {

				$criteria->add(HistoricoDocumentoPeer::ID_USUARIO, $this->id_usuario);

				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HistoricoDocumentoPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastHistoricoDocumentoCriteria) || !$this->lastHistoricoDocumentoCriteria->equals($criteria)) {
				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastHistoricoDocumentoCriteria = $criteria;

		return $this->collHistoricoDocumentos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related HistoricoDocumentos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 */
	public function getHistoricoDocumentosJoinDocumento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHistoricoDocumentos === null) {
			if ($this->isNew()) {
				$this->collHistoricoDocumentos = array();
			} else {

				$criteria->add(HistoricoDocumentoPeer::ID_USUARIO, $this->id_usuario);

				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelectJoinDocumento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HistoricoDocumentoPeer::ID_USUARIO, $this->id_usuario);

			if (!isset($this->lastHistoricoDocumentoCriteria) || !$this->lastHistoricoDocumentoCriteria->equals($criteria)) {
				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelectJoinDocumento($criteria, $con, $join_behavior);
			}
		}
		$this->lastHistoricoDocumentoCriteria = $criteria;

		return $this->collHistoricoDocumentos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collUsuarioGrupos) {
				foreach ((array) $this->collUsuarioGrupos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlcances) {
				foreach ((array) $this->collAlcances as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSesions) {
				foreach ((array) $this->collSesions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMensajes) {
				foreach ((array) $this->collMensajes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMensajeDestinos) {
				foreach ((array) $this->collMensajeDestinos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmpresas) {
				foreach ((array) $this->collEmpresas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTablas) {
				foreach ((array) $this->collTablas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFormulariosRelatedByIdUsuario) {
				foreach ((array) $this->collFormulariosRelatedByIdUsuario as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFormulariosRelatedByIdUsuarioCreador) {
				foreach ((array) $this->collFormulariosRelatedByIdUsuarioCreador as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTareas) {
				foreach ((array) $this->collTareas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collHistoricoDocumentos) {
				foreach ((array) $this->collHistoricoDocumentos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collUsuarioGrupos = null;
		$this->collAlcances = null;
		$this->collSesions = null;
		$this->collMensajes = null;
		$this->collMensajeDestinos = null;
		$this->collEmpresas = null;
		$this->collTablas = null;
		$this->collFormulariosRelatedByIdUsuario = null;
		$this->collFormulariosRelatedByIdUsuarioCreador = null;
		$this->collTareas = null;
		$this->collHistoricoDocumentos = null;
			$this->aCatalogue = null;
			$this->aProvincia = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseUsuario:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseUsuario::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseUsuario
