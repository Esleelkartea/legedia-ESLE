<?php

/**
 * Base class that represents a row from the 'campo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Oct 27 21:17:36 2010
 *
 * @package    lib.model.om
 */
abstract class BaseCampo extends BaseObject  implements Persistent {


  const PEER = 'CampoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CampoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_campo field.
	 * @var        int
	 */
	protected $id_campo;

	/**
	 * The value for the id_empresa field.
	 * @var        int
	 */
	protected $id_empresa;

	/**
	 * The value for the es_general field.
	 * @var        boolean
	 */
	protected $es_general;

	/**
	 * The value for the es_nombre field.
	 * @var        boolean
	 */
	protected $es_nombre;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the descripcion field.
	 * @var        string
	 */
	protected $descripcion;

	/**
	 * The value for the tipo field.
	 * @var        int
	 */
	protected $tipo;

	/**
	 * The value for the misma_fila field.
	 * @var        boolean
	 */
	protected $misma_fila;

	/**
	 * The value for the en_lista field.
	 * @var        boolean
	 */
	protected $en_lista;

	/**
	 * The value for the desplegable field.
	 * @var        boolean
	 */
	protected $desplegable;

	/**
	 * The value for the seleccion_multiple field.
	 * @var        boolean
	 */
	protected $seleccion_multiple;

	/**
	 * The value for the tipo_items field.
	 * @var        int
	 */
	protected $tipo_items;

	/**
	 * The value for the unidad_rangos field.
	 * @var        string
	 */
	protected $unidad_rangos;

	/**
	 * The value for the tipo_periodo field.
	 * @var        int
	 */
	protected $tipo_periodo;

	/**
	 * The value for the valor_tabla field.
	 * @var        int
	 */
	protected $valor_tabla;

	/**
	 * The value for the mostrar_en_padre field.
	 * @var        boolean
	 */
	protected $mostrar_en_padre;

	/**
	 * The value for the valor_objeto field.
	 * @var        string
	 */
	protected $valor_objeto;

	/**
	 * The value for the defecto field.
	 * @var        string
	 */
	protected $defecto;

	/**
	 * The value for the obligatorio field.
	 * @var        boolean
	 */
	protected $obligatorio;

	/**
	 * The value for the es_cod_agencia field.
	 * @var        boolean
	 */
	protected $es_cod_agencia;

	/**
	 * The value for the tamano field.
	 * @var        string
	 */
	protected $tamano;

	/**
	 * The value for the orden field.
	 * @var        int
	 */
	protected $orden;

	/**
	 * The value for the es_inconsistente field.
	 * @var        boolean
	 */
	protected $es_inconsistente;

	/**
	 * The value for the borrado field.
	 * @var        boolean
	 */
	protected $borrado;

	/**
	 * @var        Empresa
	 */
	protected $aEmpresa;

	/**
	 * @var        array RelCampoTabla[] Collection to store aggregation of RelCampoTabla objects.
	 */
	protected $collRelCampoTablas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRelCampoTablas.
	 */
	private $lastRelCampoTablaCriteria = null;

	/**
	 * @var        array ItemBase[] Collection to store aggregation of ItemBase objects.
	 */
	protected $collItemBases;

	/**
	 * @var        Criteria The criteria used to select the current contents of collItemBases.
	 */
	private $lastItemBaseCriteria = null;

	/**
	 * @var        array Tarea[] Collection to store aggregation of Tarea objects.
	 */
	protected $collTareas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTareas.
	 */
	private $lastTareaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCampo object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id_campo] column value.
	 * 
	 * @return     int
	 */
	public function getIdCampo()
	{
		return $this->id_campo;
	}

	/**
	 * Get the [id_empresa] column value.
	 * 
	 * @return     int
	 */
	public function getIdEmpresa()
	{
		return $this->id_empresa;
	}

	/**
	 * Get the [es_general] column value.
	 * 
	 * @return     boolean
	 */
	public function getEsGeneral()
	{
		return $this->es_general;
	}

	/**
	 * Get the [es_nombre] column value.
	 * 
	 * @return     boolean
	 */
	public function getEsNombre()
	{
		return $this->es_nombre;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [descripcion] column value.
	 * 
	 * @return     string
	 */
	public function getDescripcion()
	{
		return $this->descripcion;
	}

	/**
	 * Get the [tipo] column value.
	 * 
	 * @return     int
	 */
	public function getTipo()
	{
		return $this->tipo;
	}

	/**
	 * Get the [misma_fila] column value.
	 * 
	 * @return     boolean
	 */
	public function getMismaFila()
	{
		return $this->misma_fila;
	}

	/**
	 * Get the [en_lista] column value.
	 * 
	 * @return     boolean
	 */
	public function getEnLista()
	{
		return $this->en_lista;
	}

	/**
	 * Get the [desplegable] column value.
	 * 
	 * @return     boolean
	 */
	public function getDesplegable()
	{
		return $this->desplegable;
	}

	/**
	 * Get the [seleccion_multiple] column value.
	 * 
	 * @return     boolean
	 */
	public function getSeleccionMultiple()
	{
		return $this->seleccion_multiple;
	}

	/**
	 * Get the [tipo_items] column value.
	 * 
	 * @return     int
	 */
	public function getTipoItems()
	{
		return $this->tipo_items;
	}

	/**
	 * Get the [unidad_rangos] column value.
	 * 
	 * @return     string
	 */
	public function getUnidadRangos()
	{
		return $this->unidad_rangos;
	}

	/**
	 * Get the [tipo_periodo] column value.
	 * 
	 * @return     int
	 */
	public function getTipoPeriodo()
	{
		return $this->tipo_periodo;
	}

	/**
	 * Get the [valor_tabla] column value.
	 * 
	 * @return     int
	 */
	public function getValorTabla()
	{
		return $this->valor_tabla;
	}

	/**
	 * Get the [mostrar_en_padre] column value.
	 * 
	 * @return     boolean
	 */
	public function getMostrarEnPadre()
	{
		return $this->mostrar_en_padre;
	}

	/**
	 * Get the [valor_objeto] column value.
	 * 
	 * @return     string
	 */
	public function getValorObjeto()
	{
		return $this->valor_objeto;
	}

	/**
	 * Get the [defecto] column value.
	 * 
	 * @return     string
	 */
	public function getDefecto()
	{
		return $this->defecto;
	}

	/**
	 * Get the [obligatorio] column value.
	 * 
	 * @return     boolean
	 */
	public function getObligatorio()
	{
		return $this->obligatorio;
	}

	/**
	 * Get the [es_cod_agencia] column value.
	 * 
	 * @return     boolean
	 */
	public function getEsCodAgencia()
	{
		return $this->es_cod_agencia;
	}

	/**
	 * Get the [tamano] column value.
	 * 
	 * @return     string
	 */
	public function getTamano()
	{
		return $this->tamano;
	}

	/**
	 * Get the [orden] column value.
	 * 
	 * @return     int
	 */
	public function getOrden()
	{
		return $this->orden;
	}

	/**
	 * Get the [es_inconsistente] column value.
	 * 
	 * @return     boolean
	 */
	public function getEsInconsistente()
	{
		return $this->es_inconsistente;
	}

	/**
	 * Get the [borrado] column value.
	 * 
	 * @return     boolean
	 */
	public function getBorrado()
	{
		return $this->borrado;
	}

	/**
	 * Set the value of [id_campo] column.
	 * 
	 * @param      int $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setIdCampo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_campo !== $v) {
			$this->id_campo = $v;
			$this->modifiedColumns[] = CampoPeer::ID_CAMPO;
		}

		return $this;
	} // setIdCampo()

	/**
	 * Set the value of [id_empresa] column.
	 * 
	 * @param      int $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setIdEmpresa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_empresa !== $v) {
			$this->id_empresa = $v;
			$this->modifiedColumns[] = CampoPeer::ID_EMPRESA;
		}

		if ($this->aEmpresa !== null && $this->aEmpresa->getIdEmpresa() !== $v) {
			$this->aEmpresa = null;
		}

		return $this;
	} // setIdEmpresa()

	/**
	 * Set the value of [es_general] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setEsGeneral($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->es_general !== $v) {
			$this->es_general = $v;
			$this->modifiedColumns[] = CampoPeer::ES_GENERAL;
		}

		return $this;
	} // setEsGeneral()

	/**
	 * Set the value of [es_nombre] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setEsNombre($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->es_nombre !== $v) {
			$this->es_nombre = $v;
			$this->modifiedColumns[] = CampoPeer::ES_NOMBRE;
		}

		return $this;
	} // setEsNombre()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = CampoPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [descripcion] column.
	 * 
	 * @param      string $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setDescripcion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descripcion !== $v) {
			$this->descripcion = $v;
			$this->modifiedColumns[] = CampoPeer::DESCRIPCION;
		}

		return $this;
	} // setDescripcion()

	/**
	 * Set the value of [tipo] column.
	 * 
	 * @param      int $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setTipo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tipo !== $v) {
			$this->tipo = $v;
			$this->modifiedColumns[] = CampoPeer::TIPO;
		}

		return $this;
	} // setTipo()

	/**
	 * Set the value of [misma_fila] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setMismaFila($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->misma_fila !== $v) {
			$this->misma_fila = $v;
			$this->modifiedColumns[] = CampoPeer::MISMA_FILA;
		}

		return $this;
	} // setMismaFila()

	/**
	 * Set the value of [en_lista] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setEnLista($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->en_lista !== $v) {
			$this->en_lista = $v;
			$this->modifiedColumns[] = CampoPeer::EN_LISTA;
		}

		return $this;
	} // setEnLista()

	/**
	 * Set the value of [desplegable] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setDesplegable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->desplegable !== $v) {
			$this->desplegable = $v;
			$this->modifiedColumns[] = CampoPeer::DESPLEGABLE;
		}

		return $this;
	} // setDesplegable()

	/**
	 * Set the value of [seleccion_multiple] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setSeleccionMultiple($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->seleccion_multiple !== $v) {
			$this->seleccion_multiple = $v;
			$this->modifiedColumns[] = CampoPeer::SELECCION_MULTIPLE;
		}

		return $this;
	} // setSeleccionMultiple()

	/**
	 * Set the value of [tipo_items] column.
	 * 
	 * @param      int $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setTipoItems($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tipo_items !== $v) {
			$this->tipo_items = $v;
			$this->modifiedColumns[] = CampoPeer::TIPO_ITEMS;
		}

		return $this;
	} // setTipoItems()

	/**
	 * Set the value of [unidad_rangos] column.
	 * 
	 * @param      string $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setUnidadRangos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->unidad_rangos !== $v) {
			$this->unidad_rangos = $v;
			$this->modifiedColumns[] = CampoPeer::UNIDAD_RANGOS;
		}

		return $this;
	} // setUnidadRangos()

	/**
	 * Set the value of [tipo_periodo] column.
	 * 
	 * @param      int $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setTipoPeriodo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->tipo_periodo !== $v) {
			$this->tipo_periodo = $v;
			$this->modifiedColumns[] = CampoPeer::TIPO_PERIODO;
		}

		return $this;
	} // setTipoPeriodo()

	/**
	 * Set the value of [valor_tabla] column.
	 * 
	 * @param      int $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setValorTabla($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->valor_tabla !== $v) {
			$this->valor_tabla = $v;
			$this->modifiedColumns[] = CampoPeer::VALOR_TABLA;
		}

		return $this;
	} // setValorTabla()

	/**
	 * Set the value of [mostrar_en_padre] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setMostrarEnPadre($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->mostrar_en_padre !== $v) {
			$this->mostrar_en_padre = $v;
			$this->modifiedColumns[] = CampoPeer::MOSTRAR_EN_PADRE;
		}

		return $this;
	} // setMostrarEnPadre()

	/**
	 * Set the value of [valor_objeto] column.
	 * 
	 * @param      string $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setValorObjeto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->valor_objeto !== $v) {
			$this->valor_objeto = $v;
			$this->modifiedColumns[] = CampoPeer::VALOR_OBJETO;
		}

		return $this;
	} // setValorObjeto()

	/**
	 * Set the value of [defecto] column.
	 * 
	 * @param      string $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setDefecto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->defecto !== $v) {
			$this->defecto = $v;
			$this->modifiedColumns[] = CampoPeer::DEFECTO;
		}

		return $this;
	} // setDefecto()

	/**
	 * Set the value of [obligatorio] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setObligatorio($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->obligatorio !== $v) {
			$this->obligatorio = $v;
			$this->modifiedColumns[] = CampoPeer::OBLIGATORIO;
		}

		return $this;
	} // setObligatorio()

	/**
	 * Set the value of [es_cod_agencia] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setEsCodAgencia($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->es_cod_agencia !== $v) {
			$this->es_cod_agencia = $v;
			$this->modifiedColumns[] = CampoPeer::ES_COD_AGENCIA;
		}

		return $this;
	} // setEsCodAgencia()

	/**
	 * Set the value of [tamano] column.
	 * 
	 * @param      string $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setTamano($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tamano !== $v) {
			$this->tamano = $v;
			$this->modifiedColumns[] = CampoPeer::TAMANO;
		}

		return $this;
	} // setTamano()

	/**
	 * Set the value of [orden] column.
	 * 
	 * @param      int $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setOrden($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->orden !== $v) {
			$this->orden = $v;
			$this->modifiedColumns[] = CampoPeer::ORDEN;
		}

		return $this;
	} // setOrden()

	/**
	 * Set the value of [es_inconsistente] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setEsInconsistente($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->es_inconsistente !== $v) {
			$this->es_inconsistente = $v;
			$this->modifiedColumns[] = CampoPeer::ES_INCONSISTENTE;
		}

		return $this;
	} // setEsInconsistente()

	/**
	 * Set the value of [borrado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Campo The current object (for fluent API support)
	 */
	public function setBorrado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->borrado !== $v) {
			$this->borrado = $v;
			$this->modifiedColumns[] = CampoPeer::BORRADO;
		}

		return $this;
	} // setBorrado()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_campo = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_empresa = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->es_general = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->es_nombre = ($row[$startcol + 3] !== null) ? (boolean) $row[$startcol + 3] : null;
			$this->nombre = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->descripcion = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->tipo = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->misma_fila = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->en_lista = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->desplegable = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->seleccion_multiple = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->tipo_items = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->unidad_rangos = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->tipo_periodo = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->valor_tabla = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->mostrar_en_padre = ($row[$startcol + 15] !== null) ? (boolean) $row[$startcol + 15] : null;
			$this->valor_objeto = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->defecto = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->obligatorio = ($row[$startcol + 18] !== null) ? (boolean) $row[$startcol + 18] : null;
			$this->es_cod_agencia = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
			$this->tamano = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->orden = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->es_inconsistente = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->borrado = ($row[$startcol + 23] !== null) ? (boolean) $row[$startcol + 23] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 24; // 24 = CampoPeer::NUM_COLUMNS - CampoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Campo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aEmpresa !== null && $this->id_empresa !== $this->aEmpresa->getIdEmpresa()) {
			$this->aEmpresa = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CampoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CampoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aEmpresa = null;
			$this->collRelCampoTablas = null;
			$this->lastRelCampoTablaCriteria = null;

			$this->collItemBases = null;
			$this->lastItemBaseCriteria = null;

			$this->collTareas = null;
			$this->lastTareaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCampo:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CampoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CampoPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCampo:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCampo:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CampoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCampo:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CampoPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEmpresa !== null) {
				if ($this->aEmpresa->isModified() || $this->aEmpresa->isNew()) {
					$affectedRows += $this->aEmpresa->save($con);
				}
				$this->setEmpresa($this->aEmpresa);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CampoPeer::ID_CAMPO;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CampoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdCampo($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CampoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collRelCampoTablas !== null) {
				foreach ($this->collRelCampoTablas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collItemBases !== null) {
				foreach ($this->collItemBases as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTareas !== null) {
				foreach ($this->collTareas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEmpresa !== null) {
				if (!$this->aEmpresa->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEmpresa->getValidationFailures());
				}
			}


			if (($retval = CampoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collRelCampoTablas !== null) {
					foreach ($this->collRelCampoTablas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collItemBases !== null) {
					foreach ($this->collItemBases as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTareas !== null) {
					foreach ($this->collTareas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CampoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdCampo();
				break;
			case 1:
				return $this->getIdEmpresa();
				break;
			case 2:
				return $this->getEsGeneral();
				break;
			case 3:
				return $this->getEsNombre();
				break;
			case 4:
				return $this->getNombre();
				break;
			case 5:
				return $this->getDescripcion();
				break;
			case 6:
				return $this->getTipo();
				break;
			case 7:
				return $this->getMismaFila();
				break;
			case 8:
				return $this->getEnLista();
				break;
			case 9:
				return $this->getDesplegable();
				break;
			case 10:
				return $this->getSeleccionMultiple();
				break;
			case 11:
				return $this->getTipoItems();
				break;
			case 12:
				return $this->getUnidadRangos();
				break;
			case 13:
				return $this->getTipoPeriodo();
				break;
			case 14:
				return $this->getValorTabla();
				break;
			case 15:
				return $this->getMostrarEnPadre();
				break;
			case 16:
				return $this->getValorObjeto();
				break;
			case 17:
				return $this->getDefecto();
				break;
			case 18:
				return $this->getObligatorio();
				break;
			case 19:
				return $this->getEsCodAgencia();
				break;
			case 20:
				return $this->getTamano();
				break;
			case 21:
				return $this->getOrden();
				break;
			case 22:
				return $this->getEsInconsistente();
				break;
			case 23:
				return $this->getBorrado();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CampoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdCampo(),
			$keys[1] => $this->getIdEmpresa(),
			$keys[2] => $this->getEsGeneral(),
			$keys[3] => $this->getEsNombre(),
			$keys[4] => $this->getNombre(),
			$keys[5] => $this->getDescripcion(),
			$keys[6] => $this->getTipo(),
			$keys[7] => $this->getMismaFila(),
			$keys[8] => $this->getEnLista(),
			$keys[9] => $this->getDesplegable(),
			$keys[10] => $this->getSeleccionMultiple(),
			$keys[11] => $this->getTipoItems(),
			$keys[12] => $this->getUnidadRangos(),
			$keys[13] => $this->getTipoPeriodo(),
			$keys[14] => $this->getValorTabla(),
			$keys[15] => $this->getMostrarEnPadre(),
			$keys[16] => $this->getValorObjeto(),
			$keys[17] => $this->getDefecto(),
			$keys[18] => $this->getObligatorio(),
			$keys[19] => $this->getEsCodAgencia(),
			$keys[20] => $this->getTamano(),
			$keys[21] => $this->getOrden(),
			$keys[22] => $this->getEsInconsistente(),
			$keys[23] => $this->getBorrado(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CampoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdCampo($value);
				break;
			case 1:
				$this->setIdEmpresa($value);
				break;
			case 2:
				$this->setEsGeneral($value);
				break;
			case 3:
				$this->setEsNombre($value);
				break;
			case 4:
				$this->setNombre($value);
				break;
			case 5:
				$this->setDescripcion($value);
				break;
			case 6:
				$this->setTipo($value);
				break;
			case 7:
				$this->setMismaFila($value);
				break;
			case 8:
				$this->setEnLista($value);
				break;
			case 9:
				$this->setDesplegable($value);
				break;
			case 10:
				$this->setSeleccionMultiple($value);
				break;
			case 11:
				$this->setTipoItems($value);
				break;
			case 12:
				$this->setUnidadRangos($value);
				break;
			case 13:
				$this->setTipoPeriodo($value);
				break;
			case 14:
				$this->setValorTabla($value);
				break;
			case 15:
				$this->setMostrarEnPadre($value);
				break;
			case 16:
				$this->setValorObjeto($value);
				break;
			case 17:
				$this->setDefecto($value);
				break;
			case 18:
				$this->setObligatorio($value);
				break;
			case 19:
				$this->setEsCodAgencia($value);
				break;
			case 20:
				$this->setTamano($value);
				break;
			case 21:
				$this->setOrden($value);
				break;
			case 22:
				$this->setEsInconsistente($value);
				break;
			case 23:
				$this->setBorrado($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CampoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdCampo($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdEmpresa($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setEsGeneral($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEsNombre($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNombre($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDescripcion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTipo($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setMismaFila($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setEnLista($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDesplegable($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setSeleccionMultiple($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setTipoItems($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUnidadRangos($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setTipoPeriodo($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setValorTabla($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMostrarEnPadre($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setValorObjeto($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDefecto($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setObligatorio($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setEsCodAgencia($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setTamano($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setOrden($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setEsInconsistente($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setBorrado($arr[$keys[23]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CampoPeer::DATABASE_NAME);

		if ($this->isColumnModified(CampoPeer::ID_CAMPO)) $criteria->add(CampoPeer::ID_CAMPO, $this->id_campo);
		if ($this->isColumnModified(CampoPeer::ID_EMPRESA)) $criteria->add(CampoPeer::ID_EMPRESA, $this->id_empresa);
		if ($this->isColumnModified(CampoPeer::ES_GENERAL)) $criteria->add(CampoPeer::ES_GENERAL, $this->es_general);
		if ($this->isColumnModified(CampoPeer::ES_NOMBRE)) $criteria->add(CampoPeer::ES_NOMBRE, $this->es_nombre);
		if ($this->isColumnModified(CampoPeer::NOMBRE)) $criteria->add(CampoPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(CampoPeer::DESCRIPCION)) $criteria->add(CampoPeer::DESCRIPCION, $this->descripcion);
		if ($this->isColumnModified(CampoPeer::TIPO)) $criteria->add(CampoPeer::TIPO, $this->tipo);
		if ($this->isColumnModified(CampoPeer::MISMA_FILA)) $criteria->add(CampoPeer::MISMA_FILA, $this->misma_fila);
		if ($this->isColumnModified(CampoPeer::EN_LISTA)) $criteria->add(CampoPeer::EN_LISTA, $this->en_lista);
		if ($this->isColumnModified(CampoPeer::DESPLEGABLE)) $criteria->add(CampoPeer::DESPLEGABLE, $this->desplegable);
		if ($this->isColumnModified(CampoPeer::SELECCION_MULTIPLE)) $criteria->add(CampoPeer::SELECCION_MULTIPLE, $this->seleccion_multiple);
		if ($this->isColumnModified(CampoPeer::TIPO_ITEMS)) $criteria->add(CampoPeer::TIPO_ITEMS, $this->tipo_items);
		if ($this->isColumnModified(CampoPeer::UNIDAD_RANGOS)) $criteria->add(CampoPeer::UNIDAD_RANGOS, $this->unidad_rangos);
		if ($this->isColumnModified(CampoPeer::TIPO_PERIODO)) $criteria->add(CampoPeer::TIPO_PERIODO, $this->tipo_periodo);
		if ($this->isColumnModified(CampoPeer::VALOR_TABLA)) $criteria->add(CampoPeer::VALOR_TABLA, $this->valor_tabla);
		if ($this->isColumnModified(CampoPeer::MOSTRAR_EN_PADRE)) $criteria->add(CampoPeer::MOSTRAR_EN_PADRE, $this->mostrar_en_padre);
		if ($this->isColumnModified(CampoPeer::VALOR_OBJETO)) $criteria->add(CampoPeer::VALOR_OBJETO, $this->valor_objeto);
		if ($this->isColumnModified(CampoPeer::DEFECTO)) $criteria->add(CampoPeer::DEFECTO, $this->defecto);
		if ($this->isColumnModified(CampoPeer::OBLIGATORIO)) $criteria->add(CampoPeer::OBLIGATORIO, $this->obligatorio);
		if ($this->isColumnModified(CampoPeer::ES_COD_AGENCIA)) $criteria->add(CampoPeer::ES_COD_AGENCIA, $this->es_cod_agencia);
		if ($this->isColumnModified(CampoPeer::TAMANO)) $criteria->add(CampoPeer::TAMANO, $this->tamano);
		if ($this->isColumnModified(CampoPeer::ORDEN)) $criteria->add(CampoPeer::ORDEN, $this->orden);
		if ($this->isColumnModified(CampoPeer::ES_INCONSISTENTE)) $criteria->add(CampoPeer::ES_INCONSISTENTE, $this->es_inconsistente);
		if ($this->isColumnModified(CampoPeer::BORRADO)) $criteria->add(CampoPeer::BORRADO, $this->borrado);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CampoPeer::DATABASE_NAME);

		$criteria->add(CampoPeer::ID_CAMPO, $this->id_campo);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdCampo();
	}

	/**
	 * Generic method to set the primary key (id_campo column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdCampo($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Campo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdEmpresa($this->id_empresa);

		$copyObj->setEsGeneral($this->es_general);

		$copyObj->setEsNombre($this->es_nombre);

		$copyObj->setNombre($this->nombre);

		$copyObj->setDescripcion($this->descripcion);

		$copyObj->setTipo($this->tipo);

		$copyObj->setMismaFila($this->misma_fila);

		$copyObj->setEnLista($this->en_lista);

		$copyObj->setDesplegable($this->desplegable);

		$copyObj->setSeleccionMultiple($this->seleccion_multiple);

		$copyObj->setTipoItems($this->tipo_items);

		$copyObj->setUnidadRangos($this->unidad_rangos);

		$copyObj->setTipoPeriodo($this->tipo_periodo);

		$copyObj->setValorTabla($this->valor_tabla);

		$copyObj->setMostrarEnPadre($this->mostrar_en_padre);

		$copyObj->setValorObjeto($this->valor_objeto);

		$copyObj->setDefecto($this->defecto);

		$copyObj->setObligatorio($this->obligatorio);

		$copyObj->setEsCodAgencia($this->es_cod_agencia);

		$copyObj->setTamano($this->tamano);

		$copyObj->setOrden($this->orden);

		$copyObj->setEsInconsistente($this->es_inconsistente);

		$copyObj->setBorrado($this->borrado);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getRelCampoTablas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRelCampoTabla($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getItemBases() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addItemBase($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTareas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTarea($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdCampo(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Campo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CampoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CampoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Empresa object.
	 *
	 * @param      Empresa $v
	 * @return     Campo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEmpresa(Empresa $v = null)
	{
		if ($v === null) {
			$this->setIdEmpresa(NULL);
		} else {
			$this->setIdEmpresa($v->getIdEmpresa());
		}

		$this->aEmpresa = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Empresa object, it will not be re-added.
		if ($v !== null) {
			$v->addCampo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Empresa object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Empresa The associated Empresa object.
	 * @throws     PropelException
	 */
	public function getEmpresa(PropelPDO $con = null)
	{
		if ($this->aEmpresa === null && ($this->id_empresa !== null)) {
			$c = new Criteria(EmpresaPeer::DATABASE_NAME);
			$c->add(EmpresaPeer::ID_EMPRESA, $this->id_empresa);
			$this->aEmpresa = EmpresaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEmpresa->addCampos($this);
			 */
		}
		return $this->aEmpresa;
	}

	/**
	 * Clears out the collRelCampoTablas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRelCampoTablas()
	 */
	public function clearRelCampoTablas()
	{
		$this->collRelCampoTablas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRelCampoTablas collection (array).
	 *
	 * By default this just sets the collRelCampoTablas collection to an empty array (like clearcollRelCampoTablas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRelCampoTablas()
	{
		$this->collRelCampoTablas = array();
	}

	/**
	 * Gets an array of RelCampoTabla objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Campo has previously been saved, it will retrieve
	 * related RelCampoTablas from storage. If this Campo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array RelCampoTabla[]
	 * @throws     PropelException
	 */
	public function getRelCampoTablas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelCampoTablas === null) {
			if ($this->isNew()) {
			   $this->collRelCampoTablas = array();
			} else {

				$criteria->add(RelCampoTablaPeer::ID_CAMPO, $this->id_campo);

				RelCampoTablaPeer::addSelectColumns($criteria);
				$this->collRelCampoTablas = RelCampoTablaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RelCampoTablaPeer::ID_CAMPO, $this->id_campo);

				RelCampoTablaPeer::addSelectColumns($criteria);
				if (!isset($this->lastRelCampoTablaCriteria) || !$this->lastRelCampoTablaCriteria->equals($criteria)) {
					$this->collRelCampoTablas = RelCampoTablaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRelCampoTablaCriteria = $criteria;
		return $this->collRelCampoTablas;
	}

	/**
	 * Returns the number of related RelCampoTabla objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related RelCampoTabla objects.
	 * @throws     PropelException
	 */
	public function countRelCampoTablas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRelCampoTablas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RelCampoTablaPeer::ID_CAMPO, $this->id_campo);

				$count = RelCampoTablaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RelCampoTablaPeer::ID_CAMPO, $this->id_campo);

				if (!isset($this->lastRelCampoTablaCriteria) || !$this->lastRelCampoTablaCriteria->equals($criteria)) {
					$count = RelCampoTablaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRelCampoTablas);
				}
			} else {
				$count = count($this->collRelCampoTablas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a RelCampoTabla object to this object
	 * through the RelCampoTabla foreign key attribute.
	 *
	 * @param      RelCampoTabla $l RelCampoTabla
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRelCampoTabla(RelCampoTabla $l)
	{
		if ($this->collRelCampoTablas === null) {
			$this->initRelCampoTablas();
		}
		if (!in_array($l, $this->collRelCampoTablas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRelCampoTablas, $l);
			$l->setCampo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Campo is new, it will return
	 * an empty collection; or if this Campo has previously
	 * been saved, it will retrieve related RelCampoTablas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Campo.
	 */
	public function getRelCampoTablasJoinTabla($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRelCampoTablas === null) {
			if ($this->isNew()) {
				$this->collRelCampoTablas = array();
			} else {

				$criteria->add(RelCampoTablaPeer::ID_CAMPO, $this->id_campo);

				$this->collRelCampoTablas = RelCampoTablaPeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RelCampoTablaPeer::ID_CAMPO, $this->id_campo);

			if (!isset($this->lastRelCampoTablaCriteria) || !$this->lastRelCampoTablaCriteria->equals($criteria)) {
				$this->collRelCampoTablas = RelCampoTablaPeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		}
		$this->lastRelCampoTablaCriteria = $criteria;

		return $this->collRelCampoTablas;
	}

	/**
	 * Clears out the collItemBases collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addItemBases()
	 */
	public function clearItemBases()
	{
		$this->collItemBases = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collItemBases collection (array).
	 *
	 * By default this just sets the collItemBases collection to an empty array (like clearcollItemBases());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initItemBases()
	{
		$this->collItemBases = array();
	}

	/**
	 * Gets an array of ItemBase objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Campo has previously been saved, it will retrieve
	 * related ItemBases from storage. If this Campo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ItemBase[]
	 * @throws     PropelException
	 */
	public function getItemBases($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collItemBases === null) {
			if ($this->isNew()) {
			   $this->collItemBases = array();
			} else {

				$criteria->add(ItemBasePeer::ID_CAMPO, $this->id_campo);

				ItemBasePeer::addSelectColumns($criteria);
				$this->collItemBases = ItemBasePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ItemBasePeer::ID_CAMPO, $this->id_campo);

				ItemBasePeer::addSelectColumns($criteria);
				if (!isset($this->lastItemBaseCriteria) || !$this->lastItemBaseCriteria->equals($criteria)) {
					$this->collItemBases = ItemBasePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastItemBaseCriteria = $criteria;
		return $this->collItemBases;
	}

	/**
	 * Returns the number of related ItemBase objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ItemBase objects.
	 * @throws     PropelException
	 */
	public function countItemBases(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collItemBases === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ItemBasePeer::ID_CAMPO, $this->id_campo);

				$count = ItemBasePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ItemBasePeer::ID_CAMPO, $this->id_campo);

				if (!isset($this->lastItemBaseCriteria) || !$this->lastItemBaseCriteria->equals($criteria)) {
					$count = ItemBasePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collItemBases);
				}
			} else {
				$count = count($this->collItemBases);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ItemBase object to this object
	 * through the ItemBase foreign key attribute.
	 *
	 * @param      ItemBase $l ItemBase
	 * @return     void
	 * @throws     PropelException
	 */
	public function addItemBase(ItemBase $l)
	{
		if ($this->collItemBases === null) {
			$this->initItemBases();
		}
		if (!in_array($l, $this->collItemBases, true)) { // only add it if the **same** object is not already associated
			array_push($this->collItemBases, $l);
			$l->setCampo($this);
		}
	}

	/**
	 * Clears out the collTareas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTareas()
	 */
	public function clearTareas()
	{
		$this->collTareas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTareas collection (array).
	 *
	 * By default this just sets the collTareas collection to an empty array (like clearcollTareas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTareas()
	{
		$this->collTareas = array();
	}

	/**
	 * Gets an array of Tarea objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Campo has previously been saved, it will retrieve
	 * related Tareas from storage. If this Campo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tarea[]
	 * @throws     PropelException
	 */
	public function getTareas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
			   $this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

				TareaPeer::addSelectColumns($criteria);
				$this->collTareas = TareaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

				TareaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
					$this->collTareas = TareaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTareaCriteria = $criteria;
		return $this->collTareas;
	}

	/**
	 * Returns the number of related Tarea objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tarea objects.
	 * @throws     PropelException
	 */
	public function countTareas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

				$count = TareaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

				if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
					$count = TareaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTareas);
				}
			} else {
				$count = count($this->collTareas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tarea object to this object
	 * through the Tarea foreign key attribute.
	 *
	 * @param      Tarea $l Tarea
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTarea(Tarea $l)
	{
		if ($this->collTareas === null) {
			$this->initTareas();
		}
		if (!in_array($l, $this->collTareas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTareas, $l);
			$l->setCampo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Campo is new, it will return
	 * an empty collection; or if this Campo has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Campo.
	 */
	public function getTareasJoinFormulario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

				$this->collTareas = TareaPeer::doSelectJoinFormulario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinFormulario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Campo is new, it will return
	 * an empty collection; or if this Campo has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Campo.
	 */
	public function getTareasJoinUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

				$this->collTareas = TareaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Campo is new, it will return
	 * an empty collection; or if this Campo has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Campo.
	 */
	public function getTareasJoinParametro($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

				$this->collTareas = TareaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Campo is new, it will return
	 * an empty collection; or if this Campo has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Campo.
	 */
	public function getTareasJoinEmpresa($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CampoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

				$this->collTareas = TareaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_CAMPO, $this->id_campo);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinEmpresa($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collRelCampoTablas) {
				foreach ((array) $this->collRelCampoTablas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collItemBases) {
				foreach ((array) $this->collItemBases as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTareas) {
				foreach ((array) $this->collTareas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collRelCampoTablas = null;
		$this->collItemBases = null;
		$this->collTareas = null;
			$this->aEmpresa = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCampo:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCampo::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCampo
