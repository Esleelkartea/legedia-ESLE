<?php

/**
 * Base class that represents a row from the 'empresa' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Oct 27 21:17:36 2010
 *
 * @package    lib.model.om
 */
abstract class BaseEmpresa extends BaseObject  implements Persistent {


  const PEER = 'EmpresaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EmpresaPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_empresa field.
	 * @var        int
	 */
	protected $id_empresa;

	/**
	 * The value for the id_provincia field.
	 * @var        int
	 */
	protected $id_provincia;

	/**
	 * The value for the id_usuario field.
	 * @var        int
	 */
	protected $id_usuario;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the id_actividad field.
	 * @var        string
	 */
	protected $id_actividad;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the domicilio field.
	 * @var        string
	 */
	protected $domicilio;

	/**
	 * The value for the poblacion field.
	 * @var        string
	 */
	protected $poblacion;

	/**
	 * The value for the codigo_postal field.
	 * @var        string
	 */
	protected $codigo_postal;

	/**
	 * The value for the cif field.
	 * @var        string
	 */
	protected $cif;

	/**
	 * The value for the logo_min field.
	 * @var        string
	 */
	protected $logo_min;

	/**
	 * The value for the logo_med field.
	 * @var        string
	 */
	protected $logo_med;

	/**
	 * The value for the logo_max field.
	 * @var        string
	 */
	protected $logo_max;

	/**
	 * The value for the id_vtiger field.
	 * @var        int
	 */
	protected $id_vtiger;

	/**
	 * The value for the smtp_server field.
	 * @var        string
	 */
	protected $smtp_server;

	/**
	 * The value for the smtp_user field.
	 * @var        string
	 */
	protected $smtp_user;

	/**
	 * The value for the smtp_password field.
	 * @var        string
	 */
	protected $smtp_password;

	/**
	 * The value for the smtp_port field.
	 * @var        int
	 */
	protected $smtp_port;

	/**
	 * The value for the sender_address field.
	 * @var        string
	 */
	protected $sender_address;

	/**
	 * The value for the sender_name field.
	 * @var        string
	 */
	protected $sender_name;

	/**
	 * The value for the color1 field.
	 * @var        string
	 */
	protected $color1;

	/**
	 * The value for the color2 field.
	 * @var        string
	 */
	protected $color2;

	/**
	 * The value for the color3 field.
	 * @var        string
	 */
	protected $color3;

	/**
	 * The value for the color4 field.
	 * @var        string
	 */
	protected $color4;

	/**
	 * The value for the color_letra1 field.
	 * @var        string
	 */
	protected $color_letra1;

	/**
	 * The value for the color_letra2 field.
	 * @var        string
	 */
	protected $color_letra2;

	/**
	 * The value for the color_letra3 field.
	 * @var        string
	 */
	protected $color_letra3;

	/**
	 * The value for the color_letra4 field.
	 * @var        string
	 */
	protected $color_letra4;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the borrado field.
	 * @var        boolean
	 */
	protected $borrado;

	/**
	 * @var        Provincia
	 */
	protected $aProvincia;

	/**
	 * @var        Usuario
	 */
	protected $aUsuario;

	/**
	 * @var        Taula1
	 */
	protected $aTaula1;

	/**
	 * @var        array Alcance[] Collection to store aggregation of Alcance objects.
	 */
	protected $collAlcances;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlcances.
	 */
	private $lastAlcanceCriteria = null;

	/**
	 * @var        array Tabla[] Collection to store aggregation of Tabla objects.
	 */
	protected $collTablas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTablas.
	 */
	private $lastTablaCriteria = null;

	/**
	 * @var        array Campo[] Collection to store aggregation of Campo objects.
	 */
	protected $collCampos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCampos.
	 */
	private $lastCampoCriteria = null;

	/**
	 * @var        array Tarea[] Collection to store aggregation of Tarea objects.
	 */
	protected $collTareas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTareas.
	 */
	private $lastTareaCriteria = null;

	/**
	 * @var        array Documento[] Collection to store aggregation of Documento objects.
	 */
	protected $collDocumentos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDocumentos.
	 */
	private $lastDocumentoCriteria = null;

	/**
	 * @var        array HistoricoDocumento[] Collection to store aggregation of HistoricoDocumento objects.
	 */
	protected $collHistoricoDocumentos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collHistoricoDocumentos.
	 */
	private $lastHistoricoDocumentoCriteria = null;

	/**
	 * @var        array Encargado[] Collection to store aggregation of Encargado objects.
	 */
	protected $collEncargados;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEncargados.
	 */
	private $lastEncargadoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseEmpresa object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id_empresa] column value.
	 * 
	 * @return     int
	 */
	public function getIdEmpresa()
	{
		return $this->id_empresa;
	}

	/**
	 * Get the [id_provincia] column value.
	 * 
	 * @return     int
	 */
	public function getIdProvincia()
	{
		return $this->id_provincia;
	}

	/**
	 * Get the [id_usuario] column value.
	 * 
	 * @return     int
	 */
	public function getIdUsuario()
	{
		return $this->id_usuario;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [id_actividad] column value.
	 * 
	 * @return     string
	 */
	public function getIdActividad()
	{
		return $this->id_actividad;
	}

	/**
	 * Get the [telefono] column value.
	 * 
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [domicilio] column value.
	 * 
	 * @return     string
	 */
	public function getDomicilio()
	{
		return $this->domicilio;
	}

	/**
	 * Get the [poblacion] column value.
	 * 
	 * @return     string
	 */
	public function getPoblacion()
	{
		return $this->poblacion;
	}

	/**
	 * Get the [codigo_postal] column value.
	 * 
	 * @return     string
	 */
	public function getCodigoPostal()
	{
		return $this->codigo_postal;
	}

	/**
	 * Get the [cif] column value.
	 * 
	 * @return     string
	 */
	public function getCif()
	{
		return $this->cif;
	}

	/**
	 * Get the [logo_min] column value.
	 * 
	 * @return     string
	 */
	public function getLogoMin()
	{
		return $this->logo_min;
	}

	/**
	 * Get the [logo_med] column value.
	 * 
	 * @return     string
	 */
	public function getLogoMed()
	{
		return $this->logo_med;
	}

	/**
	 * Get the [logo_max] column value.
	 * 
	 * @return     string
	 */
	public function getLogoMax()
	{
		return $this->logo_max;
	}

	/**
	 * Get the [id_vtiger] column value.
	 * 
	 * @return     int
	 */
	public function getIdVtiger()
	{
		return $this->id_vtiger;
	}

	/**
	 * Get the [smtp_server] column value.
	 * 
	 * @return     string
	 */
	public function getSmtpServer()
	{
		return $this->smtp_server;
	}

	/**
	 * Get the [smtp_user] column value.
	 * 
	 * @return     string
	 */
	public function getSmtpUser()
	{
		return $this->smtp_user;
	}

	/**
	 * Get the [smtp_password] column value.
	 * 
	 * @return     string
	 */
	public function getSmtpPassword()
	{
		return $this->smtp_password;
	}

	/**
	 * Get the [smtp_port] column value.
	 * 
	 * @return     int
	 */
	public function getSmtpPort()
	{
		return $this->smtp_port;
	}

	/**
	 * Get the [sender_address] column value.
	 * 
	 * @return     string
	 */
	public function getSenderAddress()
	{
		return $this->sender_address;
	}

	/**
	 * Get the [sender_name] column value.
	 * 
	 * @return     string
	 */
	public function getSenderName()
	{
		return $this->sender_name;
	}

	/**
	 * Get the [color1] column value.
	 * 
	 * @return     string
	 */
	public function getColor1()
	{
		return $this->color1;
	}

	/**
	 * Get the [color2] column value.
	 * 
	 * @return     string
	 */
	public function getColor2()
	{
		return $this->color2;
	}

	/**
	 * Get the [color3] column value.
	 * 
	 * @return     string
	 */
	public function getColor3()
	{
		return $this->color3;
	}

	/**
	 * Get the [color4] column value.
	 * 
	 * @return     string
	 */
	public function getColor4()
	{
		return $this->color4;
	}

	/**
	 * Get the [color_letra1] column value.
	 * 
	 * @return     string
	 */
	public function getColorLetra1()
	{
		return $this->color_letra1;
	}

	/**
	 * Get the [color_letra2] column value.
	 * 
	 * @return     string
	 */
	public function getColorLetra2()
	{
		return $this->color_letra2;
	}

	/**
	 * Get the [color_letra3] column value.
	 * 
	 * @return     string
	 */
	public function getColorLetra3()
	{
		return $this->color_letra3;
	}

	/**
	 * Get the [color_letra4] column value.
	 * 
	 * @return     string
	 */
	public function getColorLetra4()
	{
		return $this->color_letra4;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [borrado] column value.
	 * 
	 * @return     boolean
	 */
	public function getBorrado()
	{
		return $this->borrado;
	}

	/**
	 * Set the value of [id_empresa] column.
	 * 
	 * @param      int $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setIdEmpresa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_empresa !== $v) {
			$this->id_empresa = $v;
			$this->modifiedColumns[] = EmpresaPeer::ID_EMPRESA;
		}

		return $this;
	} // setIdEmpresa()

	/**
	 * Set the value of [id_provincia] column.
	 * 
	 * @param      int $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setIdProvincia($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_provincia !== $v) {
			$this->id_provincia = $v;
			$this->modifiedColumns[] = EmpresaPeer::ID_PROVINCIA;
		}

		if ($this->aProvincia !== null && $this->aProvincia->getIdProvincia() !== $v) {
			$this->aProvincia = null;
		}

		return $this;
	} // setIdProvincia()

	/**
	 * Set the value of [id_usuario] column.
	 * 
	 * @param      int $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setIdUsuario($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_usuario !== $v) {
			$this->id_usuario = $v;
			$this->modifiedColumns[] = EmpresaPeer::ID_USUARIO;
		}

		if ($this->aUsuario !== null && $this->aUsuario->getIdUsuario() !== $v) {
			$this->aUsuario = null;
		}

		return $this;
	} // setIdUsuario()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = EmpresaPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [id_actividad] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setIdActividad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id_actividad !== $v) {
			$this->id_actividad = $v;
			$this->modifiedColumns[] = EmpresaPeer::ID_ACTIVIDAD;
		}

		if ($this->aTaula1 !== null && $this->aTaula1->getT1id() !== $v) {
			$this->aTaula1 = null;
		}

		return $this;
	} // setIdActividad()

	/**
	 * Set the value of [telefono] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = EmpresaPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = EmpresaPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = EmpresaPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [domicilio] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setDomicilio($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->domicilio !== $v) {
			$this->domicilio = $v;
			$this->modifiedColumns[] = EmpresaPeer::DOMICILIO;
		}

		return $this;
	} // setDomicilio()

	/**
	 * Set the value of [poblacion] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setPoblacion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->poblacion !== $v) {
			$this->poblacion = $v;
			$this->modifiedColumns[] = EmpresaPeer::POBLACION;
		}

		return $this;
	} // setPoblacion()

	/**
	 * Set the value of [codigo_postal] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setCodigoPostal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->codigo_postal !== $v) {
			$this->codigo_postal = $v;
			$this->modifiedColumns[] = EmpresaPeer::CODIGO_POSTAL;
		}

		return $this;
	} // setCodigoPostal()

	/**
	 * Set the value of [cif] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setCif($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cif !== $v) {
			$this->cif = $v;
			$this->modifiedColumns[] = EmpresaPeer::CIF;
		}

		return $this;
	} // setCif()

	/**
	 * Set the value of [logo_min] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setLogoMin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->logo_min !== $v) {
			$this->logo_min = $v;
			$this->modifiedColumns[] = EmpresaPeer::LOGO_MIN;
		}

		return $this;
	} // setLogoMin()

	/**
	 * Set the value of [logo_med] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setLogoMed($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->logo_med !== $v) {
			$this->logo_med = $v;
			$this->modifiedColumns[] = EmpresaPeer::LOGO_MED;
		}

		return $this;
	} // setLogoMed()

	/**
	 * Set the value of [logo_max] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setLogoMax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->logo_max !== $v) {
			$this->logo_max = $v;
			$this->modifiedColumns[] = EmpresaPeer::LOGO_MAX;
		}

		return $this;
	} // setLogoMax()

	/**
	 * Set the value of [id_vtiger] column.
	 * 
	 * @param      int $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setIdVtiger($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_vtiger !== $v) {
			$this->id_vtiger = $v;
			$this->modifiedColumns[] = EmpresaPeer::ID_VTIGER;
		}

		return $this;
	} // setIdVtiger()

	/**
	 * Set the value of [smtp_server] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setSmtpServer($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->smtp_server !== $v) {
			$this->smtp_server = $v;
			$this->modifiedColumns[] = EmpresaPeer::SMTP_SERVER;
		}

		return $this;
	} // setSmtpServer()

	/**
	 * Set the value of [smtp_user] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setSmtpUser($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->smtp_user !== $v) {
			$this->smtp_user = $v;
			$this->modifiedColumns[] = EmpresaPeer::SMTP_USER;
		}

		return $this;
	} // setSmtpUser()

	/**
	 * Set the value of [smtp_password] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setSmtpPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->smtp_password !== $v) {
			$this->smtp_password = $v;
			$this->modifiedColumns[] = EmpresaPeer::SMTP_PASSWORD;
		}

		return $this;
	} // setSmtpPassword()

	/**
	 * Set the value of [smtp_port] column.
	 * 
	 * @param      int $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setSmtpPort($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->smtp_port !== $v) {
			$this->smtp_port = $v;
			$this->modifiedColumns[] = EmpresaPeer::SMTP_PORT;
		}

		return $this;
	} // setSmtpPort()

	/**
	 * Set the value of [sender_address] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setSenderAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sender_address !== $v) {
			$this->sender_address = $v;
			$this->modifiedColumns[] = EmpresaPeer::SENDER_ADDRESS;
		}

		return $this;
	} // setSenderAddress()

	/**
	 * Set the value of [sender_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setSenderName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sender_name !== $v) {
			$this->sender_name = $v;
			$this->modifiedColumns[] = EmpresaPeer::SENDER_NAME;
		}

		return $this;
	} // setSenderName()

	/**
	 * Set the value of [color1] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setColor1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->color1 !== $v) {
			$this->color1 = $v;
			$this->modifiedColumns[] = EmpresaPeer::COLOR1;
		}

		return $this;
	} // setColor1()

	/**
	 * Set the value of [color2] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setColor2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->color2 !== $v) {
			$this->color2 = $v;
			$this->modifiedColumns[] = EmpresaPeer::COLOR2;
		}

		return $this;
	} // setColor2()

	/**
	 * Set the value of [color3] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setColor3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->color3 !== $v) {
			$this->color3 = $v;
			$this->modifiedColumns[] = EmpresaPeer::COLOR3;
		}

		return $this;
	} // setColor3()

	/**
	 * Set the value of [color4] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setColor4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->color4 !== $v) {
			$this->color4 = $v;
			$this->modifiedColumns[] = EmpresaPeer::COLOR4;
		}

		return $this;
	} // setColor4()

	/**
	 * Set the value of [color_letra1] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setColorLetra1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->color_letra1 !== $v) {
			$this->color_letra1 = $v;
			$this->modifiedColumns[] = EmpresaPeer::COLOR_LETRA1;
		}

		return $this;
	} // setColorLetra1()

	/**
	 * Set the value of [color_letra2] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setColorLetra2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->color_letra2 !== $v) {
			$this->color_letra2 = $v;
			$this->modifiedColumns[] = EmpresaPeer::COLOR_LETRA2;
		}

		return $this;
	} // setColorLetra2()

	/**
	 * Set the value of [color_letra3] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setColorLetra3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->color_letra3 !== $v) {
			$this->color_letra3 = $v;
			$this->modifiedColumns[] = EmpresaPeer::COLOR_LETRA3;
		}

		return $this;
	} // setColorLetra3()

	/**
	 * Set the value of [color_letra4] column.
	 * 
	 * @param      string $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setColorLetra4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->color_letra4 !== $v) {
			$this->color_letra4 = $v;
			$this->modifiedColumns[] = EmpresaPeer::COLOR_LETRA4;
		}

		return $this;
	} // setColorLetra4()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmpresaPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmpresaPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [borrado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Empresa The current object (for fluent API support)
	 */
	public function setBorrado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->borrado !== $v) {
			$this->borrado = $v;
			$this->modifiedColumns[] = EmpresaPeer::BORRADO;
		}

		return $this;
	} // setBorrado()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_empresa = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_provincia = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_usuario = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->nombre = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->id_actividad = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->telefono = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->fax = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->email = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->domicilio = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->poblacion = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->codigo_postal = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->cif = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->logo_min = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->logo_med = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->logo_max = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->id_vtiger = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->smtp_server = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->smtp_user = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->smtp_password = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->smtp_port = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->sender_address = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->sender_name = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->color1 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->color2 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->color3 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->color4 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->color_letra1 = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->color_letra2 = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->color_letra3 = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->color_letra4 = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->created_at = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->updated_at = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->borrado = ($row[$startcol + 32] !== null) ? (boolean) $row[$startcol + 32] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 33; // 33 = EmpresaPeer::NUM_COLUMNS - EmpresaPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Empresa object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aProvincia !== null && $this->id_provincia !== $this->aProvincia->getIdProvincia()) {
			$this->aProvincia = null;
		}
		if ($this->aUsuario !== null && $this->id_usuario !== $this->aUsuario->getIdUsuario()) {
			$this->aUsuario = null;
		}
		if ($this->aTaula1 !== null && $this->id_actividad !== $this->aTaula1->getT1id()) {
			$this->aTaula1 = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmpresaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EmpresaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aProvincia = null;
			$this->aUsuario = null;
			$this->aTaula1 = null;
			$this->collAlcances = null;
			$this->lastAlcanceCriteria = null;

			$this->collTablas = null;
			$this->lastTablaCriteria = null;

			$this->collCampos = null;
			$this->lastCampoCriteria = null;

			$this->collTareas = null;
			$this->lastTareaCriteria = null;

			$this->collDocumentos = null;
			$this->lastDocumentoCriteria = null;

			$this->collHistoricoDocumentos = null;
			$this->lastHistoricoDocumentoCriteria = null;

			$this->collEncargados = null;
			$this->lastEncargadoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmpresa:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmpresaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			EmpresaPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseEmpresa:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmpresa:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(EmpresaPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(EmpresaPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmpresaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseEmpresa:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			EmpresaPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProvincia !== null) {
				if ($this->aProvincia->isModified() || $this->aProvincia->isNew()) {
					$affectedRows += $this->aProvincia->save($con);
				}
				$this->setProvincia($this->aProvincia);
			}

			if ($this->aUsuario !== null) {
				if ($this->aUsuario->isModified() || $this->aUsuario->isNew()) {
					$affectedRows += $this->aUsuario->save($con);
				}
				$this->setUsuario($this->aUsuario);
			}

			if ($this->aTaula1 !== null) {
				if ($this->aTaula1->isModified() || $this->aTaula1->isNew()) {
					$affectedRows += $this->aTaula1->save($con);
				}
				$this->setTaula1($this->aTaula1);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EmpresaPeer::ID_EMPRESA;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EmpresaPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdEmpresa($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EmpresaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAlcances !== null) {
				foreach ($this->collAlcances as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTablas !== null) {
				foreach ($this->collTablas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCampos !== null) {
				foreach ($this->collCampos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTareas !== null) {
				foreach ($this->collTareas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDocumentos !== null) {
				foreach ($this->collDocumentos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collHistoricoDocumentos !== null) {
				foreach ($this->collHistoricoDocumentos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEncargados !== null) {
				foreach ($this->collEncargados as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aProvincia !== null) {
				if (!$this->aProvincia->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aProvincia->getValidationFailures());
				}
			}

			if ($this->aUsuario !== null) {
				if (!$this->aUsuario->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsuario->getValidationFailures());
				}
			}

			if ($this->aTaula1 !== null) {
				if (!$this->aTaula1->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTaula1->getValidationFailures());
				}
			}


			if (($retval = EmpresaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collAlcances !== null) {
					foreach ($this->collAlcances as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTablas !== null) {
					foreach ($this->collTablas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCampos !== null) {
					foreach ($this->collCampos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTareas !== null) {
					foreach ($this->collTareas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDocumentos !== null) {
					foreach ($this->collDocumentos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collHistoricoDocumentos !== null) {
					foreach ($this->collHistoricoDocumentos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEncargados !== null) {
					foreach ($this->collEncargados as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmpresaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdEmpresa();
				break;
			case 1:
				return $this->getIdProvincia();
				break;
			case 2:
				return $this->getIdUsuario();
				break;
			case 3:
				return $this->getNombre();
				break;
			case 4:
				return $this->getIdActividad();
				break;
			case 5:
				return $this->getTelefono();
				break;
			case 6:
				return $this->getFax();
				break;
			case 7:
				return $this->getEmail();
				break;
			case 8:
				return $this->getDomicilio();
				break;
			case 9:
				return $this->getPoblacion();
				break;
			case 10:
				return $this->getCodigoPostal();
				break;
			case 11:
				return $this->getCif();
				break;
			case 12:
				return $this->getLogoMin();
				break;
			case 13:
				return $this->getLogoMed();
				break;
			case 14:
				return $this->getLogoMax();
				break;
			case 15:
				return $this->getIdVtiger();
				break;
			case 16:
				return $this->getSmtpServer();
				break;
			case 17:
				return $this->getSmtpUser();
				break;
			case 18:
				return $this->getSmtpPassword();
				break;
			case 19:
				return $this->getSmtpPort();
				break;
			case 20:
				return $this->getSenderAddress();
				break;
			case 21:
				return $this->getSenderName();
				break;
			case 22:
				return $this->getColor1();
				break;
			case 23:
				return $this->getColor2();
				break;
			case 24:
				return $this->getColor3();
				break;
			case 25:
				return $this->getColor4();
				break;
			case 26:
				return $this->getColorLetra1();
				break;
			case 27:
				return $this->getColorLetra2();
				break;
			case 28:
				return $this->getColorLetra3();
				break;
			case 29:
				return $this->getColorLetra4();
				break;
			case 30:
				return $this->getCreatedAt();
				break;
			case 31:
				return $this->getUpdatedAt();
				break;
			case 32:
				return $this->getBorrado();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EmpresaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdEmpresa(),
			$keys[1] => $this->getIdProvincia(),
			$keys[2] => $this->getIdUsuario(),
			$keys[3] => $this->getNombre(),
			$keys[4] => $this->getIdActividad(),
			$keys[5] => $this->getTelefono(),
			$keys[6] => $this->getFax(),
			$keys[7] => $this->getEmail(),
			$keys[8] => $this->getDomicilio(),
			$keys[9] => $this->getPoblacion(),
			$keys[10] => $this->getCodigoPostal(),
			$keys[11] => $this->getCif(),
			$keys[12] => $this->getLogoMin(),
			$keys[13] => $this->getLogoMed(),
			$keys[14] => $this->getLogoMax(),
			$keys[15] => $this->getIdVtiger(),
			$keys[16] => $this->getSmtpServer(),
			$keys[17] => $this->getSmtpUser(),
			$keys[18] => $this->getSmtpPassword(),
			$keys[19] => $this->getSmtpPort(),
			$keys[20] => $this->getSenderAddress(),
			$keys[21] => $this->getSenderName(),
			$keys[22] => $this->getColor1(),
			$keys[23] => $this->getColor2(),
			$keys[24] => $this->getColor3(),
			$keys[25] => $this->getColor4(),
			$keys[26] => $this->getColorLetra1(),
			$keys[27] => $this->getColorLetra2(),
			$keys[28] => $this->getColorLetra3(),
			$keys[29] => $this->getColorLetra4(),
			$keys[30] => $this->getCreatedAt(),
			$keys[31] => $this->getUpdatedAt(),
			$keys[32] => $this->getBorrado(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmpresaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdEmpresa($value);
				break;
			case 1:
				$this->setIdProvincia($value);
				break;
			case 2:
				$this->setIdUsuario($value);
				break;
			case 3:
				$this->setNombre($value);
				break;
			case 4:
				$this->setIdActividad($value);
				break;
			case 5:
				$this->setTelefono($value);
				break;
			case 6:
				$this->setFax($value);
				break;
			case 7:
				$this->setEmail($value);
				break;
			case 8:
				$this->setDomicilio($value);
				break;
			case 9:
				$this->setPoblacion($value);
				break;
			case 10:
				$this->setCodigoPostal($value);
				break;
			case 11:
				$this->setCif($value);
				break;
			case 12:
				$this->setLogoMin($value);
				break;
			case 13:
				$this->setLogoMed($value);
				break;
			case 14:
				$this->setLogoMax($value);
				break;
			case 15:
				$this->setIdVtiger($value);
				break;
			case 16:
				$this->setSmtpServer($value);
				break;
			case 17:
				$this->setSmtpUser($value);
				break;
			case 18:
				$this->setSmtpPassword($value);
				break;
			case 19:
				$this->setSmtpPort($value);
				break;
			case 20:
				$this->setSenderAddress($value);
				break;
			case 21:
				$this->setSenderName($value);
				break;
			case 22:
				$this->setColor1($value);
				break;
			case 23:
				$this->setColor2($value);
				break;
			case 24:
				$this->setColor3($value);
				break;
			case 25:
				$this->setColor4($value);
				break;
			case 26:
				$this->setColorLetra1($value);
				break;
			case 27:
				$this->setColorLetra2($value);
				break;
			case 28:
				$this->setColorLetra3($value);
				break;
			case 29:
				$this->setColorLetra4($value);
				break;
			case 30:
				$this->setCreatedAt($value);
				break;
			case 31:
				$this->setUpdatedAt($value);
				break;
			case 32:
				$this->setBorrado($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EmpresaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdEmpresa($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdProvincia($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdUsuario($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNombre($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setIdActividad($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTelefono($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFax($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setEmail($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDomicilio($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPoblacion($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCodigoPostal($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCif($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setLogoMin($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setLogoMed($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setLogoMax($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setIdVtiger($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setSmtpServer($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setSmtpUser($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setSmtpPassword($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setSmtpPort($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSenderAddress($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setSenderName($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setColor1($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setColor2($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setColor3($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setColor4($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setColorLetra1($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setColorLetra2($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setColorLetra3($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setColorLetra4($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setCreatedAt($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setUpdatedAt($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setBorrado($arr[$keys[32]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);

		if ($this->isColumnModified(EmpresaPeer::ID_EMPRESA)) $criteria->add(EmpresaPeer::ID_EMPRESA, $this->id_empresa);
		if ($this->isColumnModified(EmpresaPeer::ID_PROVINCIA)) $criteria->add(EmpresaPeer::ID_PROVINCIA, $this->id_provincia);
		if ($this->isColumnModified(EmpresaPeer::ID_USUARIO)) $criteria->add(EmpresaPeer::ID_USUARIO, $this->id_usuario);
		if ($this->isColumnModified(EmpresaPeer::NOMBRE)) $criteria->add(EmpresaPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(EmpresaPeer::ID_ACTIVIDAD)) $criteria->add(EmpresaPeer::ID_ACTIVIDAD, $this->id_actividad);
		if ($this->isColumnModified(EmpresaPeer::TELEFONO)) $criteria->add(EmpresaPeer::TELEFONO, $this->telefono);
		if ($this->isColumnModified(EmpresaPeer::FAX)) $criteria->add(EmpresaPeer::FAX, $this->fax);
		if ($this->isColumnModified(EmpresaPeer::EMAIL)) $criteria->add(EmpresaPeer::EMAIL, $this->email);
		if ($this->isColumnModified(EmpresaPeer::DOMICILIO)) $criteria->add(EmpresaPeer::DOMICILIO, $this->domicilio);
		if ($this->isColumnModified(EmpresaPeer::POBLACION)) $criteria->add(EmpresaPeer::POBLACION, $this->poblacion);
		if ($this->isColumnModified(EmpresaPeer::CODIGO_POSTAL)) $criteria->add(EmpresaPeer::CODIGO_POSTAL, $this->codigo_postal);
		if ($this->isColumnModified(EmpresaPeer::CIF)) $criteria->add(EmpresaPeer::CIF, $this->cif);
		if ($this->isColumnModified(EmpresaPeer::LOGO_MIN)) $criteria->add(EmpresaPeer::LOGO_MIN, $this->logo_min);
		if ($this->isColumnModified(EmpresaPeer::LOGO_MED)) $criteria->add(EmpresaPeer::LOGO_MED, $this->logo_med);
		if ($this->isColumnModified(EmpresaPeer::LOGO_MAX)) $criteria->add(EmpresaPeer::LOGO_MAX, $this->logo_max);
		if ($this->isColumnModified(EmpresaPeer::ID_VTIGER)) $criteria->add(EmpresaPeer::ID_VTIGER, $this->id_vtiger);
		if ($this->isColumnModified(EmpresaPeer::SMTP_SERVER)) $criteria->add(EmpresaPeer::SMTP_SERVER, $this->smtp_server);
		if ($this->isColumnModified(EmpresaPeer::SMTP_USER)) $criteria->add(EmpresaPeer::SMTP_USER, $this->smtp_user);
		if ($this->isColumnModified(EmpresaPeer::SMTP_PASSWORD)) $criteria->add(EmpresaPeer::SMTP_PASSWORD, $this->smtp_password);
		if ($this->isColumnModified(EmpresaPeer::SMTP_PORT)) $criteria->add(EmpresaPeer::SMTP_PORT, $this->smtp_port);
		if ($this->isColumnModified(EmpresaPeer::SENDER_ADDRESS)) $criteria->add(EmpresaPeer::SENDER_ADDRESS, $this->sender_address);
		if ($this->isColumnModified(EmpresaPeer::SENDER_NAME)) $criteria->add(EmpresaPeer::SENDER_NAME, $this->sender_name);
		if ($this->isColumnModified(EmpresaPeer::COLOR1)) $criteria->add(EmpresaPeer::COLOR1, $this->color1);
		if ($this->isColumnModified(EmpresaPeer::COLOR2)) $criteria->add(EmpresaPeer::COLOR2, $this->color2);
		if ($this->isColumnModified(EmpresaPeer::COLOR3)) $criteria->add(EmpresaPeer::COLOR3, $this->color3);
		if ($this->isColumnModified(EmpresaPeer::COLOR4)) $criteria->add(EmpresaPeer::COLOR4, $this->color4);
		if ($this->isColumnModified(EmpresaPeer::COLOR_LETRA1)) $criteria->add(EmpresaPeer::COLOR_LETRA1, $this->color_letra1);
		if ($this->isColumnModified(EmpresaPeer::COLOR_LETRA2)) $criteria->add(EmpresaPeer::COLOR_LETRA2, $this->color_letra2);
		if ($this->isColumnModified(EmpresaPeer::COLOR_LETRA3)) $criteria->add(EmpresaPeer::COLOR_LETRA3, $this->color_letra3);
		if ($this->isColumnModified(EmpresaPeer::COLOR_LETRA4)) $criteria->add(EmpresaPeer::COLOR_LETRA4, $this->color_letra4);
		if ($this->isColumnModified(EmpresaPeer::CREATED_AT)) $criteria->add(EmpresaPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(EmpresaPeer::UPDATED_AT)) $criteria->add(EmpresaPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(EmpresaPeer::BORRADO)) $criteria->add(EmpresaPeer::BORRADO, $this->borrado);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);

		$criteria->add(EmpresaPeer::ID_EMPRESA, $this->id_empresa);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdEmpresa();
	}

	/**
	 * Generic method to set the primary key (id_empresa column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdEmpresa($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Empresa (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdProvincia($this->id_provincia);

		$copyObj->setIdUsuario($this->id_usuario);

		$copyObj->setNombre($this->nombre);

		$copyObj->setIdActividad($this->id_actividad);

		$copyObj->setTelefono($this->telefono);

		$copyObj->setFax($this->fax);

		$copyObj->setEmail($this->email);

		$copyObj->setDomicilio($this->domicilio);

		$copyObj->setPoblacion($this->poblacion);

		$copyObj->setCodigoPostal($this->codigo_postal);

		$copyObj->setCif($this->cif);

		$copyObj->setLogoMin($this->logo_min);

		$copyObj->setLogoMed($this->logo_med);

		$copyObj->setLogoMax($this->logo_max);

		$copyObj->setIdVtiger($this->id_vtiger);

		$copyObj->setSmtpServer($this->smtp_server);

		$copyObj->setSmtpUser($this->smtp_user);

		$copyObj->setSmtpPassword($this->smtp_password);

		$copyObj->setSmtpPort($this->smtp_port);

		$copyObj->setSenderAddress($this->sender_address);

		$copyObj->setSenderName($this->sender_name);

		$copyObj->setColor1($this->color1);

		$copyObj->setColor2($this->color2);

		$copyObj->setColor3($this->color3);

		$copyObj->setColor4($this->color4);

		$copyObj->setColorLetra1($this->color_letra1);

		$copyObj->setColorLetra2($this->color_letra2);

		$copyObj->setColorLetra3($this->color_letra3);

		$copyObj->setColorLetra4($this->color_letra4);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setBorrado($this->borrado);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAlcances() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlcance($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTablas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTabla($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCampos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCampo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTareas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTarea($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDocumentos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDocumento($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getHistoricoDocumentos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addHistoricoDocumento($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEncargados() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEncargado($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdEmpresa(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Empresa Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EmpresaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EmpresaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Provincia object.
	 *
	 * @param      Provincia $v
	 * @return     Empresa The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setProvincia(Provincia $v = null)
	{
		if ($v === null) {
			$this->setIdProvincia(NULL);
		} else {
			$this->setIdProvincia($v->getIdProvincia());
		}

		$this->aProvincia = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Provincia object, it will not be re-added.
		if ($v !== null) {
			$v->addEmpresa($this);
		}

		return $this;
	}


	/**
	 * Get the associated Provincia object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Provincia The associated Provincia object.
	 * @throws     PropelException
	 */
	public function getProvincia(PropelPDO $con = null)
	{
		if ($this->aProvincia === null && ($this->id_provincia !== null)) {
			$c = new Criteria(ProvinciaPeer::DATABASE_NAME);
			$c->add(ProvinciaPeer::ID_PROVINCIA, $this->id_provincia);
			$this->aProvincia = ProvinciaPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aProvincia->addEmpresas($this);
			 */
		}
		return $this->aProvincia;
	}

	/**
	 * Declares an association between this object and a Usuario object.
	 *
	 * @param      Usuario $v
	 * @return     Empresa The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsuario(Usuario $v = null)
	{
		if ($v === null) {
			$this->setIdUsuario(NULL);
		} else {
			$this->setIdUsuario($v->getIdUsuario());
		}

		$this->aUsuario = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Usuario object, it will not be re-added.
		if ($v !== null) {
			$v->addEmpresa($this);
		}

		return $this;
	}


	/**
	 * Get the associated Usuario object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Usuario The associated Usuario object.
	 * @throws     PropelException
	 */
	public function getUsuario(PropelPDO $con = null)
	{
		if ($this->aUsuario === null && ($this->id_usuario !== null)) {
			$c = new Criteria(UsuarioPeer::DATABASE_NAME);
			$c->add(UsuarioPeer::ID_USUARIO, $this->id_usuario);
			$this->aUsuario = UsuarioPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsuario->addEmpresas($this);
			 */
		}
		return $this->aUsuario;
	}

	/**
	 * Declares an association between this object and a Taula1 object.
	 *
	 * @param      Taula1 $v
	 * @return     Empresa The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTaula1(Taula1 $v = null)
	{
		if ($v === null) {
			$this->setIdActividad(NULL);
		} else {
			$this->setIdActividad($v->getT1id());
		}

		$this->aTaula1 = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Taula1 object, it will not be re-added.
		if ($v !== null) {
			$v->addEmpresa($this);
		}

		return $this;
	}


	/**
	 * Get the associated Taula1 object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Taula1 The associated Taula1 object.
	 * @throws     PropelException
	 */
	public function getTaula1(PropelPDO $con = null)
	{
		if ($this->aTaula1 === null && (($this->id_actividad !== "" && $this->id_actividad !== null))) {
			$c = new Criteria(Taula1Peer::DATABASE_NAME);
			$c->add(Taula1Peer::T1ID, $this->id_actividad);
			$this->aTaula1 = Taula1Peer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTaula1->addEmpresas($this);
			 */
		}
		return $this->aTaula1;
	}

	/**
	 * Clears out the collAlcances collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlcances()
	 */
	public function clearAlcances()
	{
		$this->collAlcances = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlcances collection (array).
	 *
	 * By default this just sets the collAlcances collection to an empty array (like clearcollAlcances());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlcances()
	{
		$this->collAlcances = array();
	}

	/**
	 * Gets an array of Alcance objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Empresa has previously been saved, it will retrieve
	 * related Alcances from storage. If this Empresa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Alcance[]
	 * @throws     PropelException
	 */
	public function getAlcances($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlcances === null) {
			if ($this->isNew()) {
			   $this->collAlcances = array();
			} else {

				$criteria->add(AlcancePeer::ID_EMPRESA, $this->id_empresa);

				AlcancePeer::addSelectColumns($criteria);
				$this->collAlcances = AlcancePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlcancePeer::ID_EMPRESA, $this->id_empresa);

				AlcancePeer::addSelectColumns($criteria);
				if (!isset($this->lastAlcanceCriteria) || !$this->lastAlcanceCriteria->equals($criteria)) {
					$this->collAlcances = AlcancePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlcanceCriteria = $criteria;
		return $this->collAlcances;
	}

	/**
	 * Returns the number of related Alcance objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Alcance objects.
	 * @throws     PropelException
	 */
	public function countAlcances(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlcances === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlcancePeer::ID_EMPRESA, $this->id_empresa);

				$count = AlcancePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlcancePeer::ID_EMPRESA, $this->id_empresa);

				if (!isset($this->lastAlcanceCriteria) || !$this->lastAlcanceCriteria->equals($criteria)) {
					$count = AlcancePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAlcances);
				}
			} else {
				$count = count($this->collAlcances);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Alcance object to this object
	 * through the Alcance foreign key attribute.
	 *
	 * @param      Alcance $l Alcance
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlcance(Alcance $l)
	{
		if ($this->collAlcances === null) {
			$this->initAlcances();
		}
		if (!in_array($l, $this->collAlcances, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlcances, $l);
			$l->setEmpresa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Alcances from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getAlcancesJoinTabla($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlcances === null) {
			if ($this->isNew()) {
				$this->collAlcances = array();
			} else {

				$criteria->add(AlcancePeer::ID_EMPRESA, $this->id_empresa);

				$this->collAlcances = AlcancePeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlcancePeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastAlcanceCriteria) || !$this->lastAlcanceCriteria->equals($criteria)) {
				$this->collAlcances = AlcancePeer::doSelectJoinTabla($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlcanceCriteria = $criteria;

		return $this->collAlcances;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Alcances from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getAlcancesJoinUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlcances === null) {
			if ($this->isNew()) {
				$this->collAlcances = array();
			} else {

				$criteria->add(AlcancePeer::ID_EMPRESA, $this->id_empresa);

				$this->collAlcances = AlcancePeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlcancePeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastAlcanceCriteria) || !$this->lastAlcanceCriteria->equals($criteria)) {
				$this->collAlcances = AlcancePeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlcanceCriteria = $criteria;

		return $this->collAlcances;
	}

	/**
	 * Clears out the collTablas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTablas()
	 */
	public function clearTablas()
	{
		$this->collTablas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTablas collection (array).
	 *
	 * By default this just sets the collTablas collection to an empty array (like clearcollTablas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTablas()
	{
		$this->collTablas = array();
	}

	/**
	 * Gets an array of Tabla objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Empresa has previously been saved, it will retrieve
	 * related Tablas from storage. If this Empresa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tabla[]
	 * @throws     PropelException
	 */
	public function getTablas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
			   $this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_EMPRESA, $this->id_empresa);

				TablaPeer::addSelectColumns($criteria);
				$this->collTablas = TablaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TablaPeer::ID_EMPRESA, $this->id_empresa);

				TablaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
					$this->collTablas = TablaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTablaCriteria = $criteria;
		return $this->collTablas;
	}

	/**
	 * Returns the number of related Tabla objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tabla objects.
	 * @throws     PropelException
	 */
	public function countTablas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TablaPeer::ID_EMPRESA, $this->id_empresa);

				$count = TablaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TablaPeer::ID_EMPRESA, $this->id_empresa);

				if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
					$count = TablaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTablas);
				}
			} else {
				$count = count($this->collTablas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tabla object to this object
	 * through the Tabla foreign key attribute.
	 *
	 * @param      Tabla $l Tabla
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTabla(Tabla $l)
	{
		if ($this->collTablas === null) {
			$this->initTablas();
		}
		if (!in_array($l, $this->collTablas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTablas, $l);
			$l->setEmpresa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Tablas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getTablasJoinUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_EMPRESA, $this->id_empresa);

				$this->collTablas = TablaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TablaPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
				$this->collTablas = TablaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTablaCriteria = $criteria;

		return $this->collTablas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Tablas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getTablasJoinParametro($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTablas === null) {
			if ($this->isNew()) {
				$this->collTablas = array();
			} else {

				$criteria->add(TablaPeer::ID_EMPRESA, $this->id_empresa);

				$this->collTablas = TablaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TablaPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastTablaCriteria) || !$this->lastTablaCriteria->equals($criteria)) {
				$this->collTablas = TablaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		}
		$this->lastTablaCriteria = $criteria;

		return $this->collTablas;
	}

	/**
	 * Clears out the collCampos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCampos()
	 */
	public function clearCampos()
	{
		$this->collCampos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCampos collection (array).
	 *
	 * By default this just sets the collCampos collection to an empty array (like clearcollCampos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCampos()
	{
		$this->collCampos = array();
	}

	/**
	 * Gets an array of Campo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Empresa has previously been saved, it will retrieve
	 * related Campos from storage. If this Empresa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Campo[]
	 * @throws     PropelException
	 */
	public function getCampos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCampos === null) {
			if ($this->isNew()) {
			   $this->collCampos = array();
			} else {

				$criteria->add(CampoPeer::ID_EMPRESA, $this->id_empresa);

				CampoPeer::addSelectColumns($criteria);
				$this->collCampos = CampoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampoPeer::ID_EMPRESA, $this->id_empresa);

				CampoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampoCriteria) || !$this->lastCampoCriteria->equals($criteria)) {
					$this->collCampos = CampoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampoCriteria = $criteria;
		return $this->collCampos;
	}

	/**
	 * Returns the number of related Campo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Campo objects.
	 * @throws     PropelException
	 */
	public function countCampos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCampos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampoPeer::ID_EMPRESA, $this->id_empresa);

				$count = CampoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampoPeer::ID_EMPRESA, $this->id_empresa);

				if (!isset($this->lastCampoCriteria) || !$this->lastCampoCriteria->equals($criteria)) {
					$count = CampoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCampos);
				}
			} else {
				$count = count($this->collCampos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Campo object to this object
	 * through the Campo foreign key attribute.
	 *
	 * @param      Campo $l Campo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCampo(Campo $l)
	{
		if ($this->collCampos === null) {
			$this->initCampos();
		}
		if (!in_array($l, $this->collCampos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCampos, $l);
			$l->setEmpresa($this);
		}
	}

	/**
	 * Clears out the collTareas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTareas()
	 */
	public function clearTareas()
	{
		$this->collTareas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTareas collection (array).
	 *
	 * By default this just sets the collTareas collection to an empty array (like clearcollTareas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTareas()
	{
		$this->collTareas = array();
	}

	/**
	 * Gets an array of Tarea objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Empresa has previously been saved, it will retrieve
	 * related Tareas from storage. If this Empresa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Tarea[]
	 * @throws     PropelException
	 */
	public function getTareas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
			   $this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

				TareaPeer::addSelectColumns($criteria);
				$this->collTareas = TareaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

				TareaPeer::addSelectColumns($criteria);
				if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
					$this->collTareas = TareaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTareaCriteria = $criteria;
		return $this->collTareas;
	}

	/**
	 * Returns the number of related Tarea objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Tarea objects.
	 * @throws     PropelException
	 */
	public function countTareas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

				$count = TareaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

				if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
					$count = TareaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTareas);
				}
			} else {
				$count = count($this->collTareas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Tarea object to this object
	 * through the Tarea foreign key attribute.
	 *
	 * @param      Tarea $l Tarea
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTarea(Tarea $l)
	{
		if ($this->collTareas === null) {
			$this->initTareas();
		}
		if (!in_array($l, $this->collTareas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTareas, $l);
			$l->setEmpresa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getTareasJoinFormulario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

				$this->collTareas = TareaPeer::doSelectJoinFormulario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinFormulario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getTareasJoinCampo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

				$this->collTareas = TareaPeer::doSelectJoinCampo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinCampo($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getTareasJoinUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

				$this->collTareas = TareaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Tareas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getTareasJoinParametro($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTareas === null) {
			if ($this->isNew()) {
				$this->collTareas = array();
			} else {

				$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

				$this->collTareas = TareaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TareaPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastTareaCriteria) || !$this->lastTareaCriteria->equals($criteria)) {
				$this->collTareas = TareaPeer::doSelectJoinParametro($criteria, $con, $join_behavior);
			}
		}
		$this->lastTareaCriteria = $criteria;

		return $this->collTareas;
	}

	/**
	 * Clears out the collDocumentos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDocumentos()
	 */
	public function clearDocumentos()
	{
		$this->collDocumentos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDocumentos collection (array).
	 *
	 * By default this just sets the collDocumentos collection to an empty array (like clearcollDocumentos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDocumentos()
	{
		$this->collDocumentos = array();
	}

	/**
	 * Gets an array of Documento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Empresa has previously been saved, it will retrieve
	 * related Documentos from storage. If this Empresa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Documento[]
	 * @throws     PropelException
	 */
	public function getDocumentos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocumentos === null) {
			if ($this->isNew()) {
			   $this->collDocumentos = array();
			} else {

				$criteria->add(DocumentoPeer::ID_EMPRESA, $this->id_empresa);

				DocumentoPeer::addSelectColumns($criteria);
				$this->collDocumentos = DocumentoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DocumentoPeer::ID_EMPRESA, $this->id_empresa);

				DocumentoPeer::addSelectColumns($criteria);
				if (!isset($this->lastDocumentoCriteria) || !$this->lastDocumentoCriteria->equals($criteria)) {
					$this->collDocumentos = DocumentoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDocumentoCriteria = $criteria;
		return $this->collDocumentos;
	}

	/**
	 * Returns the number of related Documento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Documento objects.
	 * @throws     PropelException
	 */
	public function countDocumentos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDocumentos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DocumentoPeer::ID_EMPRESA, $this->id_empresa);

				$count = DocumentoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DocumentoPeer::ID_EMPRESA, $this->id_empresa);

				if (!isset($this->lastDocumentoCriteria) || !$this->lastDocumentoCriteria->equals($criteria)) {
					$count = DocumentoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collDocumentos);
				}
			} else {
				$count = count($this->collDocumentos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Documento object to this object
	 * through the Documento foreign key attribute.
	 *
	 * @param      Documento $l Documento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDocumento(Documento $l)
	{
		if ($this->collDocumentos === null) {
			$this->initDocumentos();
		}
		if (!in_array($l, $this->collDocumentos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDocumentos, $l);
			$l->setEmpresa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related Documentos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getDocumentosJoinItem($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDocumentos === null) {
			if ($this->isNew()) {
				$this->collDocumentos = array();
			} else {

				$criteria->add(DocumentoPeer::ID_EMPRESA, $this->id_empresa);

				$this->collDocumentos = DocumentoPeer::doSelectJoinItem($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DocumentoPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastDocumentoCriteria) || !$this->lastDocumentoCriteria->equals($criteria)) {
				$this->collDocumentos = DocumentoPeer::doSelectJoinItem($criteria, $con, $join_behavior);
			}
		}
		$this->lastDocumentoCriteria = $criteria;

		return $this->collDocumentos;
	}

	/**
	 * Clears out the collHistoricoDocumentos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addHistoricoDocumentos()
	 */
	public function clearHistoricoDocumentos()
	{
		$this->collHistoricoDocumentos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collHistoricoDocumentos collection (array).
	 *
	 * By default this just sets the collHistoricoDocumentos collection to an empty array (like clearcollHistoricoDocumentos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initHistoricoDocumentos()
	{
		$this->collHistoricoDocumentos = array();
	}

	/**
	 * Gets an array of HistoricoDocumento objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Empresa has previously been saved, it will retrieve
	 * related HistoricoDocumentos from storage. If this Empresa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array HistoricoDocumento[]
	 * @throws     PropelException
	 */
	public function getHistoricoDocumentos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHistoricoDocumentos === null) {
			if ($this->isNew()) {
			   $this->collHistoricoDocumentos = array();
			} else {

				$criteria->add(HistoricoDocumentoPeer::ID_EMPRESA, $this->id_empresa);

				HistoricoDocumentoPeer::addSelectColumns($criteria);
				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(HistoricoDocumentoPeer::ID_EMPRESA, $this->id_empresa);

				HistoricoDocumentoPeer::addSelectColumns($criteria);
				if (!isset($this->lastHistoricoDocumentoCriteria) || !$this->lastHistoricoDocumentoCriteria->equals($criteria)) {
					$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastHistoricoDocumentoCriteria = $criteria;
		return $this->collHistoricoDocumentos;
	}

	/**
	 * Returns the number of related HistoricoDocumento objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related HistoricoDocumento objects.
	 * @throws     PropelException
	 */
	public function countHistoricoDocumentos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collHistoricoDocumentos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(HistoricoDocumentoPeer::ID_EMPRESA, $this->id_empresa);

				$count = HistoricoDocumentoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(HistoricoDocumentoPeer::ID_EMPRESA, $this->id_empresa);

				if (!isset($this->lastHistoricoDocumentoCriteria) || !$this->lastHistoricoDocumentoCriteria->equals($criteria)) {
					$count = HistoricoDocumentoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collHistoricoDocumentos);
				}
			} else {
				$count = count($this->collHistoricoDocumentos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a HistoricoDocumento object to this object
	 * through the HistoricoDocumento foreign key attribute.
	 *
	 * @param      HistoricoDocumento $l HistoricoDocumento
	 * @return     void
	 * @throws     PropelException
	 */
	public function addHistoricoDocumento(HistoricoDocumento $l)
	{
		if ($this->collHistoricoDocumentos === null) {
			$this->initHistoricoDocumentos();
		}
		if (!in_array($l, $this->collHistoricoDocumentos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collHistoricoDocumentos, $l);
			$l->setEmpresa($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related HistoricoDocumentos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getHistoricoDocumentosJoinDocumento($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHistoricoDocumentos === null) {
			if ($this->isNew()) {
				$this->collHistoricoDocumentos = array();
			} else {

				$criteria->add(HistoricoDocumentoPeer::ID_EMPRESA, $this->id_empresa);

				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelectJoinDocumento($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HistoricoDocumentoPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastHistoricoDocumentoCriteria) || !$this->lastHistoricoDocumentoCriteria->equals($criteria)) {
				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelectJoinDocumento($criteria, $con, $join_behavior);
			}
		}
		$this->lastHistoricoDocumentoCriteria = $criteria;

		return $this->collHistoricoDocumentos;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Empresa is new, it will return
	 * an empty collection; or if this Empresa has previously
	 * been saved, it will retrieve related HistoricoDocumentos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Empresa.
	 */
	public function getHistoricoDocumentosJoinUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collHistoricoDocumentos === null) {
			if ($this->isNew()) {
				$this->collHistoricoDocumentos = array();
			} else {

				$criteria->add(HistoricoDocumentoPeer::ID_EMPRESA, $this->id_empresa);

				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(HistoricoDocumentoPeer::ID_EMPRESA, $this->id_empresa);

			if (!isset($this->lastHistoricoDocumentoCriteria) || !$this->lastHistoricoDocumentoCriteria->equals($criteria)) {
				$this->collHistoricoDocumentos = HistoricoDocumentoPeer::doSelectJoinUsuario($criteria, $con, $join_behavior);
			}
		}
		$this->lastHistoricoDocumentoCriteria = $criteria;

		return $this->collHistoricoDocumentos;
	}

	/**
	 * Clears out the collEncargados collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEncargados()
	 */
	public function clearEncargados()
	{
		$this->collEncargados = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEncargados collection (array).
	 *
	 * By default this just sets the collEncargados collection to an empty array (like clearcollEncargados());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEncargados()
	{
		$this->collEncargados = array();
	}

	/**
	 * Gets an array of Encargado objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Empresa has previously been saved, it will retrieve
	 * related Encargados from storage. If this Empresa is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Encargado[]
	 * @throws     PropelException
	 */
	public function getEncargados($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEncargados === null) {
			if ($this->isNew()) {
			   $this->collEncargados = array();
			} else {

				$criteria->add(EncargadoPeer::ID_EMPRESA, $this->id_empresa);

				EncargadoPeer::addSelectColumns($criteria);
				$this->collEncargados = EncargadoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EncargadoPeer::ID_EMPRESA, $this->id_empresa);

				EncargadoPeer::addSelectColumns($criteria);
				if (!isset($this->lastEncargadoCriteria) || !$this->lastEncargadoCriteria->equals($criteria)) {
					$this->collEncargados = EncargadoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEncargadoCriteria = $criteria;
		return $this->collEncargados;
	}

	/**
	 * Returns the number of related Encargado objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Encargado objects.
	 * @throws     PropelException
	 */
	public function countEncargados(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmpresaPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEncargados === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EncargadoPeer::ID_EMPRESA, $this->id_empresa);

				$count = EncargadoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EncargadoPeer::ID_EMPRESA, $this->id_empresa);

				if (!isset($this->lastEncargadoCriteria) || !$this->lastEncargadoCriteria->equals($criteria)) {
					$count = EncargadoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEncargados);
				}
			} else {
				$count = count($this->collEncargados);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Encargado object to this object
	 * through the Encargado foreign key attribute.
	 *
	 * @param      Encargado $l Encargado
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEncargado(Encargado $l)
	{
		if ($this->collEncargados === null) {
			$this->initEncargados();
		}
		if (!in_array($l, $this->collEncargados, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEncargados, $l);
			$l->setEmpresa($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAlcances) {
				foreach ((array) $this->collAlcances as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTablas) {
				foreach ((array) $this->collTablas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCampos) {
				foreach ((array) $this->collCampos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTareas) {
				foreach ((array) $this->collTareas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDocumentos) {
				foreach ((array) $this->collDocumentos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collHistoricoDocumentos) {
				foreach ((array) $this->collHistoricoDocumentos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEncargados) {
				foreach ((array) $this->collEncargados as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAlcances = null;
		$this->collTablas = null;
		$this->collCampos = null;
		$this->collTareas = null;
		$this->collDocumentos = null;
		$this->collHistoricoDocumentos = null;
		$this->collEncargados = null;
			$this->aProvincia = null;
			$this->aUsuario = null;
			$this->aTaula1 = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseEmpresa:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseEmpresa::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseEmpresa
