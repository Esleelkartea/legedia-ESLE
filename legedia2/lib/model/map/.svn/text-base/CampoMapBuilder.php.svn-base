<?php


/**
 * This class adds structure of 'campo' table to 'legedia' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Oct 27 21:17:36 2010
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class CampoMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.CampoMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(CampoPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(CampoPeer::TABLE_NAME);
		$tMap->setPhpName('Campo');
		$tMap->setClassname('Campo');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID_CAMPO', 'IdCampo', 'INTEGER', true, null);

		$tMap->addForeignKey('ID_EMPRESA', 'IdEmpresa', 'INTEGER', 'empresa', 'ID_EMPRESA', true, null);

		$tMap->addColumn('ES_GENERAL', 'EsGeneral', 'BOOLEAN', false, null);

		$tMap->addColumn('ES_NOMBRE', 'EsNombre', 'BOOLEAN', false, null);

		$tMap->addColumn('NOMBRE', 'Nombre', 'VARCHAR', false, 150);

		$tMap->addColumn('DESCRIPCION', 'Descripcion', 'LONGVARCHAR', false, null);

		$tMap->addColumn('TIPO', 'Tipo', 'INTEGER', false, null);

		$tMap->addColumn('MISMA_FILA', 'MismaFila', 'BOOLEAN', false, null);

		$tMap->addColumn('EN_LISTA', 'EnLista', 'BOOLEAN', false, null);

		$tMap->addColumn('DESPLEGABLE', 'Desplegable', 'BOOLEAN', false, null);

		$tMap->addColumn('SELECCION_MULTIPLE', 'SeleccionMultiple', 'BOOLEAN', false, null);

		$tMap->addColumn('TIPO_ITEMS', 'TipoItems', 'INTEGER', false, null);

		$tMap->addColumn('UNIDAD_RANGOS', 'UnidadRangos', 'VARCHAR', false, 10);

		$tMap->addColumn('TIPO_PERIODO', 'TipoPeriodo', 'INTEGER', false, null);

		$tMap->addColumn('VALOR_TABLA', 'ValorTabla', 'INTEGER', false, null);

		$tMap->addColumn('MOSTRAR_EN_PADRE', 'MostrarEnPadre', 'BOOLEAN', false, null);

		$tMap->addColumn('VALOR_OBJETO', 'ValorObjeto', 'VARCHAR', false, 250);

		$tMap->addColumn('DEFECTO', 'Defecto', 'VARCHAR', false, 250);

		$tMap->addColumn('OBLIGATORIO', 'Obligatorio', 'BOOLEAN', false, null);

		$tMap->addColumn('ES_COD_AGENCIA', 'EsCodAgencia', 'BOOLEAN', false, null);

		$tMap->addColumn('TAMANO', 'Tamano', 'VARCHAR', false, 250);

		$tMap->addColumn('ORDEN', 'Orden', 'INTEGER', false, null);

		$tMap->addColumn('ES_INCONSISTENTE', 'EsInconsistente', 'BOOLEAN', false, null);

		$tMap->addColumn('BORRADO', 'Borrado', 'BOOLEAN', false, null);

	} // doBuild()

} // CampoMapBuilder
